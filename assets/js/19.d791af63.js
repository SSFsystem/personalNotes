(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{342:function(v,_,l){"use strict";l.r(_);var t=l(3),i=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"创建对象与销毁对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建对象与销毁对象"}},[v._v("#")]),v._v(" 创建对象与销毁对象")]),v._v(" "),_("ol",[_("li",[v._v("考虑以静态工厂方法替代构造函数")]),v._v(" "),_("li",[v._v("面对多参数构造函数,使用构造器例如:@Build")]),v._v(" "),_("li",[v._v("不想实例化的类,使用私有构造函数来保证不可实例化")]),v._v(" "),_("li",[v._v("依赖注入优先于单列模式: 将对象作为构造函数传入并使用")]),v._v(" "),_("li",[v._v("尽量避免创建不必要的对象:\n"),_("ol",[_("li",[v._v("装箱拆箱")]),v._v(" "),_("li",[v._v("使用静态工厂避免")]),v._v(" "),_("li",[v._v("有些对象创建昂贵(例如缓存),尽量缓存复用")])])]),v._v(" "),_("li",[v._v("清除过时的对象引用")]),v._v(" "),_("li",[v._v("避免使用终结器和清除器")]),v._v(" "),_("li",[v._v("使用 try-with-resources 优于 try-finally")])]),v._v(" "),_("h1",{attrs:{id:"对象的通用方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对象的通用方法"}},[v._v("#")]),v._v(" 对象的通用方法")]),v._v(" "),_("ol",[_("li",[v._v("覆盖 equals 方法时应遵守通用约定")]),v._v(" "),_("li",[v._v("覆盖 equals方法必重写hascode")]),v._v(" "),_("li",[v._v("始终覆盖 toString 方法")]),v._v(" "),_("li",[v._v("需要深拷贝时,覆盖clone")]),v._v(" "),_("li",[v._v("需要排序是实现  "),_("code",[v._v("Comparable")]),v._v(" 接口 或  "),_("code",[v._v("Comparator")]),v._v("接口")])]),v._v(" "),_("h1",{attrs:{id:"类和接口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类和接口"}},[v._v("#")]),v._v(" 类和接口")]),v._v(" "),_("ol",[_("li",[v._v("尽量减少类和成员的可访问性")]),v._v(" "),_("li",[v._v("在公共类这种,使用访问器的方法")]),v._v(" "),_("li",[v._v("减少可变性")]),v._v(" "),_("li",[v._v("优先选择组合(装饰器模式)而不是继承")]),v._v(" "),_("li",[v._v("继承要设计良好且有文档:写明方法作用与是怎么实现的")]),v._v(" "),_("li",[v._v("接口优于抽象类")]),v._v(" "),_("li",[v._v("接口只用于定义类型,尽量避免返回类型")]),v._v(" "),_("li",[v._v("类层次结构优于带标签的类")]),v._v(" "),_("li",[v._v("静态成员优于非静态的成员: 如果成员类不需要访问外部实例，那么始终应该设置其为静态的\n"),_("ol",[_("li",[v._v("静态成员类：作为公共的辅助类，如Map中的Entry类。")]),v._v(" "),_("li",[v._v("非静态成员类：Map的entrySet、keySet方法返回的视图，List、Set中的迭代器。")]),v._v(" "),_("li",[v._v("匿名类：新建Comparable、Runnable接口实现类，可用lambda表达式替代")]),v._v(" "),_("li",[v._v("局部类：与匿名类的区别仅为有名字，可重复使用。")])])])]),v._v(" "),_("h1",{attrs:{id:"泛型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[v._v("#")]),v._v(" 泛型")]),v._v(" "),_("ol",[_("li",[v._v("不使用原始类型")]),v._v(" "),_("li",[v._v("消除 unchecked 警告")]),v._v(" "),_("li",[v._v("list 优于数组")])])])}),[],!1,null,null,null);_.default=i.exports}}]);