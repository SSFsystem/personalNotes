(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{378:function(a,t,s){"use strict";s.r(t);var n=s(3),r=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("blockquote",[t("p",[a._v("bean 代指的就是那些被 IoC 容器所管理的对象。")])]),a._v(" "),t("p",[t("a",{attrs:{name:"xTxVC"}})]),a._v(" "),t("h2",{attrs:{id:"作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[a._v("#")]),a._v(" 作用域")]),a._v(" "),t("p",[a._v("Spring 中 Bean 的作用域通常有下面几种：")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("singleton")]),a._v(" : 唯一 bean 实例，Spring 中的 bean 默认都是单例的，对单例设计模式的应用。")]),a._v(" "),t("li",[t("strong",[a._v("prototype")]),a._v(" : 每次请求都会创建一个新的 bean 实例。")]),a._v(" "),t("li",[t("strong",[a._v("request")]),a._v(" : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP request 内有效。")]),a._v(" "),t("li",[t("strong",[a._v("session")]),a._v(" : 每一次来自新 session 的 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP session 内有效。")]),a._v(" "),t("li",[t("strong",[a._v("global-session")]),a._v(" ： 全局 session 作用域，仅仅在基于 portlet 的 web 应用中才有意义，Spring5 已经没有了。Portlet 是能够生成语义代码(例如：HTML)片段的小型 Java Web 插件。它们基于 portlet 容器，可以像 servlet 一样处理 HTTP 请求。但是，与 servlet 不同，每个 portlet 都有不同的会话。")])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("bean id"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"..."')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"..."')]),a._v(" scope"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"singleton"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("bean"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Bean")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Scope")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConfigurableBeanFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("SCOPE_PROTOTYPE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("personPrototype")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[t("a",{attrs:{name:"D8RZF"}})]),a._v(" "),t("h2",{attrs:{id:"生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[a._v("#")]),a._v(" 生命周期")]),a._v(" "),t("p",[a._v("简单的说: 实例化  ->  属性注入 -> 初始化 -> 销毁\nspring除了通过class来记录对象信息,还通过** BeanDefinition 来记录对象信息**")]),a._v(" "),t("p",[t("img",{attrs:{src:"1650804578750-33b553d5-99de-469b-a9e5-132cd6d940ae.jpeg",alt:""}})]),a._v(" "),t("p",[t("a",{attrs:{name:"mVis1"}})]),a._v(" "),t("h3",{attrs:{id:"postconstruct"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#postconstruct"}},[a._v("#")]),a._v(" @PostConstruct")]),a._v(" "),t("p",[a._v("这个注解的作用是在项目初始化的时候执行注释的方法,同一类里只有一个方法可以用此注释,方法不能有参数,和返回值,非静态")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('class A{\n\n  @Autowired\n  private B b;\n\n  public A(){\n     System.out.println("此时B还未被加载 b = "+b);\n  }\n\n  @PostConstruct\n  public void init(){\n      System.out.println("此时B已经被加载了 b = "+b);\n  }\n\n}\n\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br")])]),t("p",[a._v("执行的顺序为\n类内的构造方法 -> @Autowired ->@PostConstruct")]),a._v(" "),t("p",[t("a",{attrs:{name:"cg3Qr"}})]),a._v(" "),t("h3",{attrs:{id:"循环依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环依赖"}},[a._v("#")]),a._v(" 循环依赖")]),a._v(" "),t("p",[a._v("**过程: **例如A 依赖B ,B也依赖A\nA会先实例化,检查到B没有实例化,转头依赖B,等B实例化后,发现需要依赖A,检查到A以及实例化完成,就将B对象返回给A\n**原理:**三级缓存\n三个缓存是Map类型,分别为")]),a._v(" "),t("ol",[t("li",[t("ul",[t("li",[a._v("singletonObjects(一级，日常实际获取Bean的地方);   正式对象")])])]),a._v(" "),t("li",[a._v(":earlySingletonObjects(二级，还没进行属性注入，由三级缓存放进来);")]),a._v(" "),t("li",[a._v(":singletonFactories(三级，Value是一个对象工厂);")])]),a._v(" "),t("p",[a._v("在实例化后会把自己放入 三级缓存\n依赖注入时,根据依赖将对象从三级缓存中移动 到二级缓存\n初始化完成后:二级缓存对象会转移到一级缓存 \t\t\t\t\n \t\t\t\n \t\t")]),a._v(" "),t("p",[t("a",{attrs:{name:"VBG6O"}})]),a._v(" "),t("h3",{attrs:{id:"源码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#源码"}},[a._v("#")]),a._v(" 源码")]),a._v(" "),t("ul",[t("li",[a._v("关键源码⽅法（强烈建议⾃⼰去撸⼀遍）")]),a._v(" "),t("li",[a._v("org.springframework.context.support.AbstractApplicationContext#refresh** (⼊⼝) **")]),a._v(" "),t("li",[a._v("org.springframework.context.support.AbstractApplicationContext#finishBeanFactoryIniti alization "),t("strong",[a._v("(初始化单例对象⼊⼝)")])]),a._v(" "),t("li",[a._v("org.springframework.beans.factory.config.ConfigurableListableBeanFactory#preInstantia teSingletons** (初始化单例对象⼊⼝) **")]),a._v(" "),t("li",[a._v("org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.Strin g)** （万恶之源，获取并创建Bean的⼊⼝）**")]),a._v(" "),t("li",[a._v("org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean "),t("strong",[a._v("（实际的获取并创 建Bean的实现）")])]),a._v(" "),t("li",[a._v("org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(j ava.lang.String) **（从缓存中尝试获取） **")]),a._v(" "),t("li",[a._v("org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBe an(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[]) "),t("strong",[a._v("（实例化Bean）")])]),a._v(" "),t("li",[a._v("org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreate Bean **（实例化Bean具体实现） **")]),a._v(" "),t("li",[a._v("org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBe anInstance **（具体实例化过程） **")]),a._v(" "),t("li",[a._v("org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#addSingletonFa ctory **（将实例化后的Bean添加到三级缓存） **")]),a._v(" "),t("li",[a._v("org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#populate Bean **（实例化后属性注⼊） **")]),a._v(" "),t("li",[a._v("org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#initiali zeBean(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition) **（初始化⼊⼝）  ** "),t("a",{attrs:{name:"mKQO9"}})])]),a._v(" "),t("h3",{attrs:{id:"生命周期图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生命周期图"}},[a._v("#")]),a._v(" 生命周期图")]),a._v(" "),t("p",[t("img",{attrs:{src:"1648623757454-b4282ac6-3b9d-439d-ad76-46a578471f25.png",alt:"image.png"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"1648623797384-5c99e3ee-d75c-4140-a766-03fa88637199.png",alt:"image.png"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"1648623199508-25172ce7-5bd5-4287-927a-3685a4dc245d.png",alt:"Spring三级缓存图.png"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);