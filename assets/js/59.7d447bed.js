(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{382:function(t,a,n){"use strict";n.r(a);var e=n(3),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"1656899092468-2de8cde3-7272-4c12-967e-64970a7b8558.jpeg",alt:""}}),t._v(" "),a("a",{attrs:{name:"brlD0"}})]),t._v(" "),a("h2",{attrs:{id:"概念和体系结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念和体系结构"}},[t._v("#")]),t._v(" 概念和体系结构")]),t._v(" "),a("p",[a("a",{attrs:{name:"drqLk"}})]),t._v(" "),a("h3",{attrs:{id:"netty-核心组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#netty-核心组件"}},[t._v("#")]),t._v(" Netty 核心组件")]),t._v(" "),a("p",[a("a",{attrs:{name:"vgs5c"}})]),t._v(" "),a("h4",{attrs:{id:"channel-通道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channel-通道"}},[t._v("#")]),t._v(" Channel (通道)")]),t._v(" "),a("p",[t._v("是**Java Nio **的基本构造, 可以把 Channel 看作是传入（入站）或者传出（出站）数据的载体。因此，它可以 被打开或者被关闭，连接或者断开连接\\ "),a("a",{attrs:{name:"UTlON"}})]),t._v(" "),a("h4",{attrs:{id:"回调"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调"}},[t._v("#")]),t._v(" 回调")]),t._v(" "),a("p",[t._v("其实就是方法,指向被提供给另一个方法的方法的引用. 这使得后 者可以在适当的时候调用前者  . "),a("a",{attrs:{name:"D4cNu"}})]),t._v(" "),a("h4",{attrs:{id:"future"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#future"}},[t._v("#")]),t._v(" Future")]),t._v(" "),a("p",[t._v("Future 提供了另一种在操作完成时通知应用程序的方式。**这个对象可以看作是一个异步操 作的结果的占位符；**它将在未来的某个时刻完成，并提供对其结果的访问。\\ "),a("a",{attrs:{name:"Xrrpa"}})]),t._v(" "),a("h4",{attrs:{id:"事件和channelhandle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件和channelhandle"}},[t._v("#")]),t._v(" 事件和ChannelHandle")]),t._v(" "),a("p",[a("img",{attrs:{src:"1656899828680-403af9b7-884d-48ce-a318-5d09f13205d1.png",alt:"image.png"}}),t._v("\n Netty 使用不同的"),a("strong",[t._v("事件")]),t._v("来通知我们状态的改变或者是操作的状态。这使得我们能够基于已经 发生的事件来触发适当的动作\n"),a("strong",[t._v("事件")]),t._v("可以分类为入站事件与出站事件:\n"),a("strong",[t._v("入站事件:")])]),t._v(" "),a("ol",[a("li",[t._v("连接已被激活或者连接失活；")]),t._v(" "),a("li",[t._v("数据读取")]),t._v(" "),a("li",[t._v("用户事件")]),t._v(" "),a("li",[t._v("错误事件")])]),t._v(" "),a("p",[a("strong",[t._v("出站事件:")])]),t._v(" "),a("ol",[a("li",[t._v("打开或者关闭到远程节点的连接；")]),t._v(" "),a("li",[t._v("将数据写到或者冲刷到套接字。")])]),t._v(" "),a("p",[t._v(" 每个"),a("strong",[t._v("事件")]),t._v("都可以被分发给 **ChannelHandler **类中的某个用户实现的方法。 这是一个很好的 将事件驱动范式直接转换为应用程序构件块的例子")]),t._v(" "),a("p",[a("a",{attrs:{name:"czTkH"}})]),t._v(" "),a("h3",{attrs:{id:"netty的组件和设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#netty的组件和设计"}},[t._v("#")]),t._v(" Netty的组件和设计")]),t._v(" "),a("p",[a("a",{attrs:{name:"xG3M8"}})]),t._v(" "),a("h4",{attrs:{id:"cannel-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cannel-接口"}},[t._v("#")]),t._v(" Cannel 接口")]),t._v(" "),a("p",[t._v("基本的 I/O 操作（bind()、connect()、read()和 write()）依赖于底层网络传输所提 供的原语。在基于 Java 的网络编程中，其基本的构造是 class Socket。Netty 的 Channel 接 口所提供的 API，大大地降低了直接使用 Socket 类的复杂性。")]),t._v(" "),a("blockquote",[a("p",[t._v("Socket: 套接字”，是进程间进行网络通信的抽象。")])]),t._v(" "),a("p",[a("a",{attrs:{name:"f5eGx"}})]),t._v(" "),a("h4",{attrs:{id:"eventloop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventloop"}},[t._v("#")]),t._v(" EventLoop")]),t._v(" "),a("p",[t._v("EventLoop 定义了 Netty 的核心抽象，用于处理连接的生命周期中所发生的事件。")]),t._v(" "),a("blockquote",[a("p",[t._v("Channel、EventLoop、Thread 以及 EventLoopGroup 之间的关系。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"1656900335087-ed1430ea-8161-41f8-ab42-74f4e28cc439.png",alt:"image.png"}})]),t._v(" "),a("ol",[a("li",[t._v("一个 EventLoopGroup 包含一个或者多个 EventLoop；")]),t._v(" "),a("li",[t._v("一个 EventLoop 在它的生命周期内只和一个 Thread 绑定；")]),t._v(" "),a("li",[t._v("所有由 EventLoop 处理的 I/O 事件都将在它专有的 Thread 上被处理； ")]),t._v(" "),a("li",[t._v("一个 Channel 在它的生命周期内只注册于一个 EventLoop；")]),t._v(" "),a("li",[t._v("一个 EventLoop 可能会被分配给一个或多个 Channel。")])]),t._v(" "),a("p",[a("a",{attrs:{name:"zuqFH"}})]),t._v(" "),a("h4",{attrs:{id:"channelfuture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channelfuture"}},[t._v("#")]),t._v(" ChannelFuture")]),t._v(" "),a("blockquote",[a("p",[t._v("ChannelFuture 是将来要执行的操作的结果的 占位符")])]),t._v(" "),a("p",[t._v("Netty 中所有的 I/O 操作都是异步的。因为一个操作可能不会 立即返回，所以我们需要一种用于在之后的某个时间点确定其结果的方法。   Netty 提供了 **ChannelFuture **接口，其 addListener()方法注册了一个 ChannelFutureListener，以 便在某个操作完成时（无论是否成功）得到通知。")]),t._v(" "),a("p",[a("a",{attrs:{name:"khStV"}})]),t._v(" "),a("h4",{attrs:{id:"channelhandler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channelhandler"}},[t._v("#")]),t._v(" ChannelHandler")]),t._v(" "),a("p",[t._v("处理数据 据的应用程序逻辑的容器  ,Netty 针对应用实现了不同的实现类供使用\n例如:\n"),a("img",{attrs:{src:"02Java%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/assets/xqegau/1653547737540-c356483a-b76a-4d7d-8a0a-37e7cb8dfd93.png",alt:"image.png"}}),t._v("\nAdapter 是实现了接口中默认的方法,便于我们调用使用")]),t._v(" "),a("p",[a("a",{attrs:{name:"Eanoh"}})]),t._v(" "),a("h4",{attrs:{id:"channelpipeline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channelpipeline"}},[t._v("#")]),t._v(" ChannelPipeLine")]),t._v(" "),a("p",[a("img",{attrs:{src:"02Java%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86/assets/xqegau/1653547529921-7135ff3e-1e6e-4a40-b910-dc8669169714.png",alt:""}}),t._v("\n ChannelPipeline 为 ChannelHandler 链提供了容器，并定义了用于在该链上传播入站 和出站事件流的 API。当 Channel 被创建时，它会被自动地分配到它专属的 ChannelPipeline。 ChannelHandler 安装到 ChannelPipeline 中的过程如下所示：")]),t._v(" "),a("ol",[a("li",[t._v("一个 ChannelInitializer 的实现被注册到了 ServerBootstrap 中①")]),t._v(" "),a("li",[t._v("当 ChannelInitializer.initChannel()方法被调用时,ChannelInitializer 将在 ChannelPipeline 中安装一组自定义的 ChannelHandler；")]),t._v(" "),a("li",[t._v("ChannelInitializer 将它自己从 ChannelPipeline 中移除。")])]),t._v(" "),a("p",[a("strong",[t._v("流动顺序")]),t._v(" "),a("img",{attrs:{src:"1656901046953-1d5b96e9-40a3-4a8b-b9ca-19039964b69b.png",alt:"image.png"}}),t._v("\n**InHandler **是从头部开始流动,**OutHandler **是从尾部开始流动,后添加的先执行.")]),t._v(" "),a("p",[a("a",{attrs:{name:"qcFRv"}})]),t._v(" "),a("h3",{attrs:{id:"练习-启动客户与服务端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习-启动客户与服务端"}},[t._v("#")]),t._v(" 练习:启动客户与服务端")]),t._v(" "),a("p",[a("strong",[t._v("配置Maven 引用Netty")]),t._v(" "),a("strong",[t._v("启动客户端")]),t._v(" "),a("strong",[t._v("启动服务端")]),t._v(" "),a("a",{attrs:{name:"FD7aL"}})]),t._v(" "),a("h3",{attrs:{id:"传输"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传输"}},[t._v("#")]),t._v(" 传输")]),t._v(" "),a("blockquote",[a("p",[t._v("流经网络的数据总是具有相同的类型：字节。这些字节是如何流动的主要取决于我们所说的 网络传输—一个帮助我们抽象底层数据传输机制的概念。")])]),t._v(" "),a("p",[t._v("Netty 为它所有的传输实现提供了一个"),a("strong",[t._v("通用 API")]),t._v("，这使得这种转换比你直接使用 JDK 所能够达到的简单得多。\\ "),a("a",{attrs:{name:"c6mJ1"}})]),t._v(" "),a("h4",{attrs:{id:"传输api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传输api"}},[t._v("#")]),t._v(" 传输API")]),t._v(" "),a("p",[t._v("传输 API 的核心是 interface Channel，它被用于所有的 I/O 操作。"),a("br"),t._v(" "),a("img",{attrs:{src:"1656914737847-862169b5-52ef-4c97-9684-6568709ba18b.png",alt:"image.png"}}),t._v("\n每个Channel 都会被分配一个**ChannelPipeLine "),a("strong",[t._v("和 "),a("strong",[t._v("ChannelConfig")]),t._v("\n** ChannelConfig 包含了该 Channel 的所有配置设置，并且支持热更新。")]),a("br"),t._v("\n **ChannelPipeline **持有所有将应用于入站和出站数据以及事件的 ChannelHandler 实 例，这些 ChannelHandler 实现了应用程序用于处理状态变化以及数据处理的逻辑。")]),t._v(" "),a("p",[a("strong",[t._v("Channel 的方法")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("eventLoop")]),t._v(" "),a("td",[t._v("返回分配给 Channel 的 EventLoop")])]),t._v(" "),a("tr",[a("td",[t._v("pipeline")]),t._v(" "),a("td",[t._v("返回分配给 Channel 的 ChannelPipeline")])]),t._v(" "),a("tr",[a("td",[t._v("isActive")]),t._v(" "),a("td",[t._v("如果 Channel 是活动的，则返回 true。活动的意义可能依赖于底层的传输。例如， 一个 Socket 传输一旦连接到了远程节点便是活动的，而一个 Datagram 传输一旦 被打开便是活动的")])]),t._v(" "),a("tr",[a("td",[t._v("localAddress")]),t._v(" "),a("td",[t._v("返回本地的 SocketAddress")])]),t._v(" "),a("tr",[a("td",[t._v("remoteAddress")]),t._v(" "),a("td",[t._v("返回远程的 SocketAddress")])]),t._v(" "),a("tr",[a("td",[t._v("write")]),t._v(" "),a("td",[t._v("将数据写到远程节点。这个数据将被传递给 ChannelPipeline，并且排队直到它被 冲刷")])]),t._v(" "),a("tr",[a("td",[t._v("flush")]),t._v(" "),a("td",[t._v("将之前已写的数据冲刷到底层传输，如一个 Socket")])]),t._v(" "),a("tr",[a("td",[t._v("writeAndFlush")]),t._v(" "),a("td",[t._v("一个简便的方法，等同于调用 write()并接着调用 flush()")])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"qU7sz"}})]),t._v(" "),a("h4",{attrs:{id:"传输类型选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传输类型选择"}},[t._v("#")]),t._v(" 传输类型选择")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//选择传输类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventLoopGroup")]),t._v(" group "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NioEventLoopGroup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerBootstrap")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerBootstrap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("group")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("group"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("channel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NioServerSocketChannel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("strong",[t._v("Netty 所提供的传输类型")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("包")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("NIO")]),t._v(" "),a("td",[t._v("io.netty.channel.socket.nio")]),t._v(" "),a("td",[t._v("使用 java.nio.channels 包作为基础——基于 选择器的方式")])]),t._v(" "),a("tr",[a("td",[t._v("Epoll")]),t._v(" "),a("td",[t._v("io.netty.channel.epoll")]),t._v(" "),a("td",[t._v("由 JNI 驱动的 epoll()和非阻塞 IO。这个传输支持 只有在Linux上可用的多种特性，如SO_REUSEPORT， 比 NIO 传输更快，而且是完全非阻塞的")])]),t._v(" "),a("tr",[a("td",[t._v("OIO")]),t._v(" "),a("td",[t._v("io.netty.channel.socket.oio")]),t._v(" "),a("td",[t._v("使用 java.net 包作为基础——使用阻塞流")])]),t._v(" "),a("tr",[a("td",[t._v("Local")]),t._v(" "),a("td",[t._v("io.netty.channel.local")]),t._v(" "),a("td",[t._v("可以在 VM 内部通过管道进行通信的本地传输")])]),t._v(" "),a("tr",[a("td",[t._v("Embedded")]),t._v(" "),a("td",[t._v("io.netty.channel.embedded")]),t._v(" "),a("td",[t._v("Embedded 传输，允许使用 ChannelHandler 而又 不需要一个真正的基于网络的传输。这在测试你的 ChannelHandler 实现时非常有用")])])])]),t._v(" "),a("p",[a("strong",[t._v("传输模式推荐")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("应用程序的需求")]),t._v(" "),a("th",[t._v("推荐的传输")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("非阻塞代码库或者一个常规的起点")]),t._v(" "),a("td",[t._v("NIO（或者在 Linux 上使用 epoll  )")])]),t._v(" "),a("tr",[a("td",[t._v("阻塞代码库")]),t._v(" "),a("td",[t._v("OIO")])]),t._v(" "),a("tr",[a("td",[t._v("在同一个 JVM 内部的通信")]),t._v(" "),a("td",[t._v("Local")])]),t._v(" "),a("tr",[a("td",[t._v("测试 ChannelHandler 的实现")]),t._v(" "),a("td",[t._v("Embedded")])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"pOhCq"}})]),t._v(" "),a("h3",{attrs:{id:"bytebuf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bytebuf"}},[t._v("#")]),t._v(" ByteBuf")]),t._v(" "),a("blockquote",[a("p",[t._v("正如前面所提到的，网络数据的基本单位总是字节。Java NIO 提供了 "),a("strong",[t._v("ByteBuffer")]),t._v(" 作为它 的字节容器，但是这个类使用起来过于复杂，而且也有些烦琐。 Netty 的 ByteBuffer 替代品是 "),a("strong",[t._v("ByteBuf")]),t._v("，一个强大的实现，既解决了 JDK API 的局限性， 又为网络应用程序的开发者提供了更好的 API。")])]),t._v(" "),a("p",[t._v("Netty 的数据处理 API 通过两个组件暴露——abstract class "),a("strong",[t._v("ByteBuf")]),t._v(" 和 interface "),a("strong",[t._v("ByteBufHolder")]),t._v("。 "),a("a",{attrs:{name:"x8fB9"}})]),t._v(" "),a("h4",{attrs:{id:"bytebuf-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bytebuf-类"}},[t._v("#")]),t._v(" ByteBuf  类")]),t._v(" "),a("p",[t._v("ByteBuf 类维护了两个不同的索引,一个用于读取,一个用于写入.这两个索引初始都在0位置,随你的读写操作而变化\n"),a("img",{attrs:{src:"1656940667729-bdfafd89-4731-4791-aba5-f40dfb3da6d9.png",alt:"image.png"}}),t._v("\n名称以 read 或者 write 开头的 ByteBuf 方法，将会推进其对应的索引，而名称以 set 或 者 get 开头的操作则不会。后面的这些方法将在作为一个参数传入的一个相对索引上执行操作。 可以指定 ByteBuf 的最大容量。试图移动写索引（即 writerIndex）超过这个值将会触 发一个异常IndexOutOfBoundsException。 "),a("a",{attrs:{name:"hkhkB"}})]),t._v(" "),a("h5",{attrs:{id:"使用模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用模式"}},[t._v("#")]),t._v(" 使用模式")]),t._v(" "),a("ol",[a("li",[t._v("堆缓冲区")])]),t._v(" "),a("p",[t._v("将数据存储在**JVM **的堆空间中,它能在没有使用池化的情况下提供快速的分配和释放")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuf")]),t._v(" heapBuf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("heapBuf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//检查ByteByuf是否有一个支撑数组.是否初始化")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" array "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" heapBuf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" heapBuf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readableBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取可读字节")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("直接缓冲区")])]),t._v(" "),a("p",[t._v("数据将驻留在会被垃圾回收的堆之外,可以避免每次调用I/O 操作之前(或之后)将缓冲区的内容复制到一个中间缓冲区\n缺点是: 数据的分配和释放都会较为昂贵,如果在理遗留代码，也可能会遇到另外一个缺点：因为数据不是在堆上，所以你不得不进行一 次复制")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuf")]),t._v(" heapBuf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("heapBuf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//检查 ByteBuf 是否由数组支撑。如果不是，则这是一个直接缓冲区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" directBuf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readableBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取可读字节数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" array "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//分配一个新的数组来保存具有该长度的字节数据 ")]),t._v("\ndirectBuf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("directBuf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readerIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将字节复制到该数组    ")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("复合缓冲区")])]),t._v(" "),a("p",[t._v("netty通过ByteBuf 子类——"),a("strong",[t._v("CompositeByteBuf")]),t._v("——实现了为多个ByteBuf 提供一个聚合视图(将多个缓冲区表示为单个合并缓冲区的虚拟表示),按需添加和删除.")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用复合缓冲区模式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompositeByteBuf")]),t._v(" messageBuf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Unpooled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compositeBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuf")]),t._v(" headerBuf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// can be backing or direct")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuf")]),t._v(" bodyBuf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// can be backing or direct")]),t._v("\nmessageBuf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addComponents")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("headerBuf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bodyBuf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将多个缓冲区追加到复合缓冲区")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuf")]),t._v(" buf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" messageBuf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//访问CompositeByteBuf 中的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompositeByteBuf")]),t._v(" compBuf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Unpooled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compositeBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" compBuf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readableBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取可读字节")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" array "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//分配一个具有可读字节数长度的新数组")]),t._v("\ncompBuf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compBuf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readerIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将字节读到该数组中")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("p",[a("a",{attrs:{name:"AkEk7"}})]),t._v(" "),a("h5",{attrs:{id:"字节级操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字节级操作"}},[t._v("#")]),t._v(" 字节级操作")]),t._v(" "),a("blockquote",[a("p",[t._v("ByteBuf 提供了许多超出基本读,写操作的方法用于修改数据")])]),t._v(" "),a("p",[a("a",{attrs:{name:"lE3Ze"}})]),t._v(" "),a("h6",{attrs:{id:"_1-随机访问索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-随机访问索引"}},[t._v("#")]),t._v(" 1. 随机访问索引")]),t._v(" "),a("p",[t._v("与普通的字节数组一样,ByteBuf 索引是从零开始,最后一个索引总是capacity() - 1;")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuf")]),t._v(" buffer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("capacity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getByte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//get 操作不会影响读写索引, 用 readerIndex(index)或者 writerIndex(index)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//会影响读写索引")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[a("a",{attrs:{name:"gywNh"}})]),t._v(" "),a("h6",{attrs:{id:"_2-顺序访问索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-顺序访问索引"}},[t._v("#")]),t._v(" 2.顺序访问索引")]),t._v(" "),a("p",[t._v("虽然 ByteBuf 同时具有读索引和写索引，但是 JDK 的 ByteBuffer 却只有一个索引，这 也就是为什么必须调用 flip()方法来在读模式和写模式之间进行切换的原因。图 展示了 ByteBuf 是如何被它的两个索引划分成 3 个区域的。\n"),a("img",{attrs:{src:"1656942429578-c23e207f-0cad-4cf6-929d-27a48c79c7ac.png",alt:"image.png"}}),t._v(" "),a("a",{attrs:{name:"Dd5Tk"}})]),t._v(" "),a("h6",{attrs:{id:"_3-可丢弃索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-可丢弃索引"}},[t._v("#")]),t._v(" 3.可丢弃索引")]),t._v(" "),a("p",[t._v("调用**discardReadBytes() **方法,可以丢弃读过的字节并回收空间,但不建议如此做,因为可读字节（图中标记为 CONTENT 的部分）必须被移 动到缓冲区的开始位置.这极有可能会导致内存复制(因为只是移动了可以读取的字节以及 writerIndex，而没有对所有可写入的字节进行擦除写。).\n"),a("img",{attrs:{src:"1656942635186-6230df89-687f-4386-940b-2e39f26b2ef2.png",alt:"image.png"}})]),t._v(" "),a("p",[a("a",{attrs:{name:"B8Ppv"}})]),t._v(" "),a("h6",{attrs:{id:"_4-可读字节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-可读字节"}},[t._v("#")]),t._v(" 4.可读字节")]),t._v(" "),a("p",[t._v("ByteBuf 的可读字节分段存储了实际数据。新分配的、包装的或者复制的缓冲区的默认的 readerIndex 值为 0。任何名称以 read 或者 skip 开头的操作都将检索或者跳过位于当前 readerIndex 的数据，并且将它增加已读字节数。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuf")]),t._v(" buffer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isReadable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("a",{attrs:{name:"QNge3"}})]),t._v(" "),a("h6",{attrs:{id:"_5-可写字节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-可写字节"}},[t._v("#")]),t._v(" 5.可写字节")]),t._v(" "),a("p",[t._v("可写字节分段是指一个拥有未定义内容的、写入就绪的内存区域。新分配的缓冲区的 writerIndex 的默认值为 0。任何名称以 write 开头的操作都将从当前的 writerIndex 处 开始写数据，并将它增加已经写入的字节数。如果写操作的目标也是 ByteBuf，并且没有指定 源索引的值，则源缓冲区的 readerIndex 也同样会被增加相同的大小。")]),t._v(" "),a("blockquote",[a("p",[t._v("writeBytes(ByteBuf dest);")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Fills the writable bytes of a buffer with random integers. ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuf")]),t._v(" buffer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writableBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//确认是否还有足够空间")]),t._v("\n buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("random"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("a",{attrs:{name:"WMJaF"}})]),t._v(" "),a("h6",{attrs:{id:"_6-索引管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-索引管理"}},[t._v("#")]),t._v(" 6.索引管理")]),t._v(" "),a("ol",[a("li",[t._v("mark(int readlimit)和 reset()方法，分别 被用来将流中的当前位置标记为指定的值，以及将流重置到该位置")]),t._v(" "),a("li",[t._v("markReaderIndex()、markWriterIndex()、resetWriterIndex() 和 resetReaderIndex()来标记和重置 ByteBuf 的 readerIndex 和 writerIndex。这些和 InputStream 上的调用类似，只是没有 readlimit 参数来指定标记什么时候失效")]),t._v(" "),a("li",[t._v("readerIndex(int)或者 writerIndex(int)来将索引移动到指定位置。试 图将任何一个索引设置到一个无效的位置都将导致一个 IndexOutOfBoundsException")]),t._v(" "),a("li",[t._v("clear()方法来将 readerIndex 和 writerIndex 都设置为 0。注意，这 并不会清除内存中的内容。(clear()比调用 discardReadBytes()轻量得多，因为它将只是重置索引而不会复 制任何的内存。) "),a("a",{attrs:{name:"waCWB"}})])]),t._v(" "),a("h6",{attrs:{id:"_7-查找操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-查找操作"}},[t._v("#")]),t._v(" 7.查找操作")]),t._v(" "),a("ol",[a("li",[t._v("使用 indexOf() 来简单查找")]),t._v(" "),a("li",[t._v("通过那些需要一个ByteProcessor 作为参数的方法来查找 "),a("a",{attrs:{name:"mwX5I"}})])]),t._v(" "),a("h6",{attrs:{id:"_8-派生缓冲区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-派生缓冲区"}},[t._v("#")]),t._v(" 8. 派生缓冲区")]),t._v(" "),a("p",[t._v("为 ByteBuf 提供了以专门的方式来呈现其内容的视图。这类视图是通过以下方 法被创建的：")]),t._v(" "),a("ol",[a("li",[t._v("duplicate()")]),t._v(" "),a("li",[t._v("slice()")]),t._v(" "),a("li",[t._v("slice(int, int)；")]),t._v(" "),a("li",[t._v("Unpooled.unmodifiableBuffer(…)；")]),t._v(" "),a("li",[t._v("order(ByteOrder)；")]),t._v(" "),a("li",[t._v("readSlice(int)")])]),t._v(" "),a("p",[t._v("每个这些方法都将返回一个新的 ByteBuf 实例，它具有自己的读索引、写索引和标记 索引。其内部存储和 JDK 的 ByteBuffer 一样也是共享的。这使得派生缓冲区的创建成本 是很低廉的，但是这也意味着，如果你修改了它的内容，也同时修改了其对应的"),a("strong",[t._v("源实例")]),t._v("，所 以要小心")]),t._v(" "),a("blockquote",[a("p",[t._v("ByteBuf 复制 如果需要一个现有缓冲区的真实副本，请使用 copy()或者 copy(int, int)方 法。不同于派生缓冲区，由这个调用所返回的 ByteBuf 拥有独立的数据副本")])]),t._v(" "),a("p",[a("a",{attrs:{name:"Y7NcH"}})]),t._v(" "),a("h6",{attrs:{id:"_9-读写操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-读写操作"}},[t._v("#")]),t._v(" 9. 读写操作")]),t._v(" "),a("p",[t._v("读写操作根据是否会影响索引分为两种")]),t._v(" "),a("ol",[a("li",[t._v("get()和 set()操作，从给定的索引开始，并且保持索引不变；")]),t._v(" "),a("li",[t._v("read()和 write()操作，从给定的索引开始，并且会根据已经访问过的字节数对索 引进行调整。")])]),t._v(" "),a("p",[a("strong",[t._v("get()操作")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("getBoolean(int)")]),t._v(" "),a("td",[t._v("返回给定索引处的 Boolean 值")])]),t._v(" "),a("tr",[a("td",[t._v("getByte(int)")]),t._v(" "),a("td",[t._v("返回给定索引处的字节")])]),t._v(" "),a("tr",[a("td",[t._v("getUnsignedByte(int)")]),t._v(" "),a("td",[t._v("将给定索引处的无符号字节值作为 short 返回0")])]),t._v(" "),a("tr",[a("td",[t._v("getMedium(int)")]),t._v(" "),a("td",[t._v("返回给定索引处的 24 位的中等 int 值")])]),t._v(" "),a("tr",[a("td",[t._v("getUnsignedMedium(int)")]),t._v(" "),a("td",[t._v("返回给定索引处的无符号的 24 位的中等 int 值")])]),t._v(" "),a("tr",[a("td",[t._v("getInt(int)")]),t._v(" "),a("td",[t._v("返回给定索引处的 int 值")])]),t._v(" "),a("tr",[a("td",[t._v("getUnsignedInt(int)")]),t._v(" "),a("td",[t._v("将给定索引处的无符号 int 值作为 long 返回")])]),t._v(" "),a("tr",[a("td",[t._v("getLong(int")]),t._v(" "),a("td",[t._v("返回给定索引处的 long 值")])]),t._v(" "),a("tr",[a("td",[t._v("getShort(int)")]),t._v(" "),a("td",[t._v("返回给定索引处的 short 值")])]),t._v(" "),a("tr",[a("td",[t._v("getUnsignedShort(int)")]),t._v(" "),a("td",[t._v("将给定索引处的无符号 short 值作为 int 返回")])]),t._v(" "),a("tr",[a("td",[t._v("getBytes(int, ...)")]),t._v(" "),a("td",[t._v("将该缓冲区中从给定索引开始的数据传送到指定的目的地")])])])]),t._v(" "),a("p",[a("strong",[t._v("set()操作")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("setBoolean(int, boolean)")]),t._v(" "),a("td",[t._v("设定给定索引处的 Boolean 值")])]),t._v(" "),a("tr",[a("td",[t._v("setByte(int index, int value)")]),t._v(" "),a("td",[t._v("设定给定索引处的字节值")])]),t._v(" "),a("tr",[a("td",[t._v("setMedium(int index, int value)")]),t._v(" "),a("td",[t._v("设定给定索引处的 24 位的中等 int 值")])]),t._v(" "),a("tr",[a("td",[t._v("setInt(int index, int value)")]),t._v(" "),a("td",[t._v("设定给定索引处的 int 值")])]),t._v(" "),a("tr",[a("td",[t._v("setLong(int index, long value)")]),t._v(" "),a("td",[t._v("设定给定索引处的 long 值")])]),t._v(" "),a("tr",[a("td",[t._v("setShort(int index, int value)")]),t._v(" "),a("td",[t._v("设定给定索引处的 short 值")])])])]),t._v(" "),a("p",[a("strong",[t._v("read()操作")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("readBoolean(")]),t._v(" "),a("td",[t._v("返回当前 readerIndex 处的 Boolean，并将 readerIndex 增加 1")])]),t._v(" "),a("tr",[a("td",[t._v("readByte()")]),t._v(" "),a("td",[t._v("返回当前 readerIndex 处的字节，并将 readerIndex 增加1")])]),t._v(" "),a("tr",[a("td",[t._v("readUnsignedByte()")]),t._v(" "),a("td",[t._v("将当前 readerIndex 处的无符号字节值作为 short 返回，并将 readerIndex 增加1")])]),t._v(" "),a("tr",[a("td",[t._v("readMedium(")]),t._v(" "),a("td",[t._v("返回当前 readerIndex 处的 24 位的中等 int 值，并将 readerIndex 增加 3")])]),t._v(" "),a("tr",[a("td",[t._v("readUnsignedMedium()")]),t._v(" "),a("td",[t._v("返回当前 readerIndex 处的 24 位的无符号的中等 int 值，并将 readerIndex 增加 3")])]),t._v(" "),a("tr",[a("td",[t._v("readInt()")]),t._v(" "),a("td",[t._v("返回当前 readerIndex 的 int 值，并将 readerIndex 增加 4")])]),t._v(" "),a("tr",[a("td",[t._v("readUnsignedInt()")]),t._v(" "),a("td",[t._v("将当前 readerIndex 处的无符号的 int 值作为 long 值返回，并将 readerIndex 增加 4")])]),t._v(" "),a("tr",[a("td",[t._v("readLong()")]),t._v(" "),a("td",[t._v("返回当前 readerIndex 处的 long 值，并将 readerIndex 增加 8")])]),t._v(" "),a("tr",[a("td",[t._v("readShort()")]),t._v(" "),a("td",[t._v("返回当前 readerIndex 处的 short 值，并将 readerIndex 增加 2")])]),t._v(" "),a("tr",[a("td",[t._v("readUnsignedShort()")]),t._v(" "),a("td",[t._v("将当前 readerIndex 处的无符号 short 值作为 int 值返回，并将 readerIndex 增加 2")])]),t._v(" "),a("tr",[a("td",[t._v("readBytes(ByteBuf")]),t._v(" "),a("td",[t._v("byte[] destination, int dstIndex [,int length])")])])])]),t._v(" "),a("p",[a("strong",[t._v("write()操作")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("writeBoolean(boolean)")]),t._v(" "),a("td",[t._v("在当前 writerIndex 处写入一个 Boolean，并将 writerIndex 增加 1")])]),t._v(" "),a("tr",[a("td",[t._v("writeByte(int)")]),t._v(" "),a("td",[t._v("在当前 writerIndex 处写入一个字节值，并将 writerIndex 增加 1")])]),t._v(" "),a("tr",[a("td",[t._v("writeMedium(int)")]),t._v(" "),a("td",[t._v("在当前 writerIndex 处写入一个中等的 int 值，并将 writerIndex 增加 3")])]),t._v(" "),a("tr",[a("td",[t._v("writeInt(int)")]),t._v(" "),a("td",[t._v("在当前 writerIndex 处写入一个 int 值，并将 writerIndex 增加 4")])]),t._v(" "),a("tr",[a("td",[t._v("writeLong(long)")]),t._v(" "),a("td",[t._v("在当前 writerIndex 处写入一个 long 值，并将 writerIndex 增加 8")])]),t._v(" "),a("tr",[a("td",[t._v("writeShort(int)")]),t._v(" "),a("td",[t._v("在当前 writerIndex 处写入一个 short 值，并将 writerIndex 增加 2")])]),t._v(" "),a("tr",[a("td",[t._v("writeBytes(source ByteBuf")]),t._v(" "),a("td",[t._v("byte[] [,int srcIndex ,int length])")])])])]),t._v(" "),a("p",[a("strong",[t._v("更多操作")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("isReadable()")]),t._v(" "),a("td",[t._v("如果至少有一个字节可供读取，则返回 true")])]),t._v(" "),a("tr",[a("td",[t._v("isWritable()")]),t._v(" "),a("td",[t._v("如果至少有一个字节可被写入，则返回 true")])]),t._v(" "),a("tr",[a("td",[t._v("readableBytes()")]),t._v(" "),a("td",[t._v("返回可被读取的字节数")])]),t._v(" "),a("tr",[a("td",[t._v("writableBytes()")]),t._v(" "),a("td",[t._v("返回可被写入的字节数")])]),t._v(" "),a("tr",[a("td",[t._v("capacity(")]),t._v(" "),a("td",[t._v("返回 ByteBuf 可容纳的字节数。在此之后，它会尝试再次扩展直 到达到 maxCapacity()")])]),t._v(" "),a("tr",[a("td",[t._v("maxCapacity(")]),t._v(" "),a("td",[t._v("返回 ByteBuf 可以容纳的最大字节数")])]),t._v(" "),a("tr",[a("td",[t._v("hasArray(")]),t._v(" "),a("td",[t._v("如果 ByteBuf 由一个字节数组支撑，则返回 true")])]),t._v(" "),a("tr",[a("td",[t._v("array(")]),t._v(" "),a("td",[t._v("如果 ByteBuf 由一个字节数组支撑则返回该数组；否则，它将抛出一个 UnsupportedOperationException 异常")])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"pcESB"}})]),t._v(" "),a("h4",{attrs:{id:"bytebufholder-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bytebufholder-接口"}},[t._v("#")]),t._v(" ByteBufHolder 接口")]),t._v(" "),a("p",[t._v("如果想要实现一个将其有效负载存储在 ByteBuf 中的消息对象，那么 ByteBufHolder 将 是个不错的选择\nByteBufHolder 只有几种用于访问底层数据和引用计数的方法。表 列出了它们（这里 不包括它继承自 ReferenceCounted 的那些方法）")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("content()")]),t._v(" "),a("td",[t._v("返回由这个 ByteBufHolder 所持有的 ByteBuf")])]),t._v(" "),a("tr",[a("td",[t._v("copy()")]),t._v(" "),a("td",[t._v("返回这个 ByteBufHolder 的一个深拷贝，包括一个其所包含的 ByteBuf 的非共享副本")])]),t._v(" "),a("tr",[a("td",[t._v("duplicate()")]),t._v(" "),a("td",[t._v("返回这个 ByteBufHolder 的一个浅拷贝，包括一个其所包含的 ByteBuf 的共享副本")])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"hL9uI"}})]),t._v(" "),a("h4",{attrs:{id:"bytebuf-管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bytebuf-管理"}},[t._v("#")]),t._v(" ByteBuf 管理")]),t._v(" "),a("p",[t._v("除了实际的数据负载之外，我们还需要存储各种属性值。ByteBufHolder 就是为了处理这种常见的情况,")]),t._v(" "),a("blockquote",[a("p",[t._v("管理 ByteBuf 实例的不同方式")])]),t._v(" "),a("p",[a("a",{attrs:{name:"aJeNe"}})]),t._v(" "),a("h5",{attrs:{id:"_1-按需分配-bytebufallocator-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-按需分配-bytebufallocator-接口"}},[t._v("#")]),t._v(" 1.按需分配:ByteBufAllocator 接口")]),t._v(" "),a("p",[t._v("为了降低分配和释放内存的开销，,Netty 通过 interface ByteBufAllocator 实现了 （ByteBuf 的）池化，它可以用来分配我们所描述过的任意类型的 ByteBuf 实例。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名 称")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("buffer() buffer(int initialCapacity); buffer(int initialCapacity, int maxCapacity);")]),t._v(" "),a("td",[t._v("返回一个基于堆或者直接内存 存储的 ByteBuf")])]),t._v(" "),a("tr",[a("td",[t._v("heapBuffer() heapBuffer(int initialCapacity) heapBuffer(int initialCapacity, int maxCapacity)")]),t._v(" "),a("td",[t._v("返回一个基于堆内存存储的 ByteBuf")])]),t._v(" "),a("tr",[a("td",[t._v("directBuffer() directBuffer(int initialCapacity) directBuffer(int initialCapacity, int maxCapacity)")]),t._v(" "),a("td",[t._v("返回一个基于直接内存存储的 ByteBuf")])]),t._v(" "),a("tr",[a("td",[t._v("compositeBuffer() compositeBuffer(int maxNumComponents) compositeDirectBuffer() compositeDirectBuffer(int maxNumComponents); compositeHeapBuffer() compositeHeapBuffer(int maxNumComponents);")]),t._v(" "),a("td",[t._v("返回一个可以通过添加最大到 指定数目的基于堆的或者直接 内存存储的缓冲区来扩展的 CompositeByteBuf")])]),t._v(" "),a("tr",[a("td",[t._v("ioBuffer()")]),t._v(" "),a("td",[t._v("返回一个用于套接字的 I/O 操 作的 ByteBuf")])])])]),t._v(" "),a("ol",[a("li",[t._v("可以通过 Channel（每个都可以有一个不同的 ByteBufAllocator 实例）")]),t._v(" "),a("li",[t._v("绑定到 ChannelHandler 的 ChannelHandlerContext 获取一个到 ByteBufAllocator 的引用")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Channel")]),t._v(" channel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBufAllocator")]),t._v(" allocator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ChannelHandlerContext")]),t._v(" ctx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBufAllocator")]),t._v(" allocator2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("Netty 提供了两种 ByteBufAllocator 的实现：PooledByteBufAllocator 和 UnpooledByteBufAllocator。前者池化了 ByteBuf 的实例以提高性能并最大限度地减少内存碎片,后者的实池化ByteBuf实例，并且在每次它被调用时都会返回一个新的实例。 "),a("a",{attrs:{name:"eBmrB"}})]),t._v(" "),a("h5",{attrs:{id:"_2-unpooled-缓冲区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-unpooled-缓冲区"}},[t._v("#")]),t._v(" 2. Unpooled 缓冲区")]),t._v(" "),a("p",[t._v("未能获取一个到 ByteBufAllocator 的引用。对于这种情况，Netty 提 供了一个简单的称为 Unpooled 的工具类，它提供了静态的辅助方法来创建未池化的 ByteBuf")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("buffer() buffer(int initialCapacity) buffer(int initialCapacity, int maxCapacity)")]),t._v(" "),a("td",[t._v("返回一个未池化的基于堆内存存储的 ByteBuf")])]),t._v(" "),a("tr",[a("td",[t._v("directBuffer() directBuffer(int initialCapacity) directBuffer(int initialCapacity, int maxCapacity)")]),t._v(" "),a("td",[t._v("返回一个未池化的基于直接内存存储 的 ByteBuf")])]),t._v(" "),a("tr",[a("td",[t._v("wrappedBuffer()")]),t._v(" "),a("td",[t._v("返回一个包装了给定数据的 ByteBuf")])]),t._v(" "),a("tr",[a("td",[t._v("copiedBuffer()")]),t._v(" "),a("td",[t._v("返回一个复制了给定数据的 ByteBuf")])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"fACxF"}})]),t._v(" "),a("h5",{attrs:{id:"_3-bytebufutil-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-bytebufutil-类"}},[t._v("#")]),t._v(" 3.ByteBufUtil 类")]),t._v(" "),a("p",[t._v("ByteBufUtil 提供了用于操作 ByteBuf 的静态的辅助方法。因为这个 API 是通用的，并 且和池化无关，所以这些方法已然在分配类的外部实现。 这些静态方法中最有价值的可能就是 hexdump()方法，它以十六进制的表示形式打印 ByteBuf 的内容。这在各种情况下都很有用，例如，出于调试的目的记录 ByteBuf 的内容。十 六进制的表示通常会提供一个比字节值的直接表示形式更加有用的日志条目，此外，十六进制的 版本还可以很容易地转换回实际的字节表示。 另一个有用的方法是 boolean equals(ByteBuf, ByteBuf)，它被用来判断两个 ByteBuf 实例的相等性。如果你实现自己的 ByteBuf 子类，你可能会发现 ByteBufUtil 的其他有用方法。")]),t._v(" "),a("p",[a("a",{attrs:{name:"gfytu"}})]),t._v(" "),a("h4",{attrs:{id:"引用计数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[t._v("#")]),t._v(" 引用计数")]),t._v(" "),a("p",[t._v("通过在某个对象所持有的资源不再被其他对象引用时释放该对象所持有的资源来优化内存使用和性能的技术。Netty 在第 4 版中为 ByteBuf 和 ByteBufHolder 引入了 引用计数技术，它们都实现了 interface ReferenceCounted。")]),t._v(" "),a("p",[a("a",{attrs:{name:"WaiSB"}})]),t._v(" "),a("h3",{attrs:{id:"channelhandler-和-channelpipeline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channelhandler-和-channelpipeline"}},[t._v("#")]),t._v(" ChannelHandler 和 ChannelPipeline")]),t._v(" "),a("p",[a("a",{attrs:{name:"K2C9n"}})]),t._v(" "),a("h4",{attrs:{id:"channelhandler家族"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channelhandler家族"}},[t._v("#")]),t._v(" ChannelHandler家族")]),t._v(" "),a("p",[a("a",{attrs:{name:"sVCzs"}})]),t._v(" "),a("h5",{attrs:{id:"channel-生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channel-生命周期"}},[t._v("#")]),t._v(" Channel 生命周期")]),t._v(" "),a("p",[t._v("Interface Channel 定义了一组和 ChannelInboundHandler API 密切相关的简单但 功能强大的状态模型，\n"),a("img",{attrs:{src:"1656949270220-afdc85aa-8286-42be-bd55-786fa92bdd3e.png",alt:"image.png"}})]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("状态模型")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ChannelUnregistered")]),t._v(" "),a("td",[t._v("Channel 已经被创建，但还未注册到 EventLoop")])]),t._v(" "),a("tr",[a("td",[t._v("ChannelRegistered")]),t._v(" "),a("td",[t._v("Channel 已经被注册到了 EventLoop")])]),t._v(" "),a("tr",[a("td",[t._v("ChannelActive")]),t._v(" "),a("td",[t._v("Channel 处于活动状态（已经连接到它的远程节点）。它现在可以接收和发送数据了")])]),t._v(" "),a("tr",[a("td",[t._v("ChannelInactive")]),t._v(" "),a("td",[t._v("Channel 没有连接到远程节点")])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"wO8oL"}})]),t._v(" "),a("h5",{attrs:{id:"channelhandler-生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channelhandler-生命周期"}},[t._v("#")]),t._v(" ChannelHandler 生命周期")]),t._v(" "),a("p",[t._v("interface "),a("strong",[t._v("ChannelHandler")]),t._v(" 定义的生命周期操作，在 ChannelHandler 被添加到 ChannelPipeline 中或者被从 ChannelPipeline 中移除时会调用这些操作。这些 方法中的每一个都接受一个 ChannelHandlerContext 参数。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("handlerAdded")]),t._v(" "),a("td",[t._v("当把 ChannelHandler 添加到 ChannelPipeline 中时被调用")])]),t._v(" "),a("tr",[a("td",[t._v("handlerRemoved")]),t._v(" "),a("td",[t._v("当从 ChannelPipeline 中移除 ChannelHandler 时被调用")])]),t._v(" "),a("tr",[a("td",[t._v("exceptionCaught")]),t._v(" "),a("td",[t._v("当处理过程中在 ChannelPipeline 中有错误产生时被调用")])])])]),t._v(" "),a("p",[t._v("Netty 定义了下面两个重要的 ChannelHandler 子接口：")]),t._v(" "),a("ol",[a("li",[t._v("ChannelInboundHandler——处理入站数据以及各种状态变化；")]),t._v(" "),a("li",[t._v("ChannelOutboundHandler——处理出站数据并且允许拦截所有的操作 "),a("a",{attrs:{name:"uXlj4"}})])]),t._v(" "),a("h5",{attrs:{id:"channelinboundhandler-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channelinboundhandler-接口"}},[t._v("#")]),t._v(" ChannelInboundHandler 接口")]),t._v(" "),a("p",[a("a",{attrs:{name:"pazAX"}})]),t._v(" "),a("h5",{attrs:{id:"channeloutboundhandler-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channeloutboundhandler-接口"}},[t._v("#")]),t._v(" ChannelOutboundHandler 接口")]),t._v(" "),a("p",[a("a",{attrs:{name:"g4DwQ"}})]),t._v(" "),a("h5",{attrs:{id:"channelhandler-适配器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channelhandler-适配器"}},[t._v("#")]),t._v(" ChannelHandler 适配器")]),t._v(" "),a("p",[a("a",{attrs:{name:"QIwjo"}})]),t._v(" "),a("h5",{attrs:{id:"资源管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源管理"}},[t._v("#")]),t._v(" 资源管理")]),t._v(" "),a("p",[t._v("#####\n#####\n##### "),a("a",{attrs:{name:"Hfo9B"}})]),t._v(" "),a("h4",{attrs:{id:"channelpipeline-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channelpipeline-接口"}},[t._v("#")]),t._v(" ChannelPipeline 接口")]),t._v(" "),a("p",[a("a",{attrs:{name:"GtVz8"}})]),t._v(" "),a("h4",{attrs:{id:"channelcontext-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channelcontext-接口"}},[t._v("#")]),t._v(" ChannelContext 接口")]),t._v(" "),a("p",[a("a",{attrs:{name:"isFdd"}})]),t._v(" "),a("h4",{attrs:{id:"异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[t._v("#")]),t._v(" 异常处理")]),t._v(" "),a("p",[a("a",{attrs:{name:"tRQjF"}})]),t._v(" "),a("h3",{attrs:{id:"eventloop-和线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventloop-和线程模型"}},[t._v("#")]),t._v(" EventLoop 和线程模型")])])}),[],!1,null,null,null);a.default=s.exports}}]);