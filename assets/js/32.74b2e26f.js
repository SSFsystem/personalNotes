(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{353:function(s,a,t){"use strict";t.r(a);var e=t(3),r=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("为了高性能与高并发")])]),s._v(" "),a("p",[a("a",{attrs:{name:"dxZux"}})]),s._v(" "),a("h2",{attrs:{id:"redis基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis基础"}},[s._v("#")]),s._v(" redis基础")]),s._v(" "),a("p",[a("a",{attrs:{name:"KHVcT"}})]),s._v(" "),a("h3",{attrs:{id:"常用数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用数据结构"}},[s._v("#")]),s._v(" 常用数据结构")]),s._v(" "),a("ol",[a("li",[s._v("String  常用于需要计数的场景")]),s._v(" "),a("li",[s._v("list    发布与订阅或者说消息队列、慢查询")]),s._v(" "),a("li",[s._v("hash   系统中对象数据的存储。")]),s._v(" "),a("li",[s._v("set   不能重复的数据")]),s._v(" "),a("li",[s._v("sorted set       需要对数据根据某个权重进⾏排序")])]),s._v(" "),a("p",[s._v("**redisTemplate **常用操作: "),a("a",{attrs:{href:"https://blog.csdn.net/lydms/article/details/105224210",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.csdn.net/lydms/article/details/105224210"),a("OutboundLink")],1),s._v(" "),a("a",{attrs:{name:"lV3Tx"}})]),s._v(" "),a("h3",{attrs:{id:"设置过期时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置过期时间"}},[s._v("#")]),s._v(" 设置过期时间")]),s._v(" "),a("p",[s._v("内存是有限的,如果一直保存,会存在空间存储溢出")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" exp key "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v(" # 数据在 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v("s 后过期\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" setex key "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v(" value # 数据在 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v("s 后过期 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("setex"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("pire"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OK")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ttl key # 查看数据还有多久过期\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("Redis中除了字符串类型有⾃⼰独有设置过期时间的命令 setex 外，其他⽅法都需要依靠 expire 命令来设置过期时间 。另外， persist 命令可以移除⼀个键的过期时间\\ "),a("a",{attrs:{name:"VnPuc"}})]),s._v(" "),a("h3",{attrs:{id:"过期数据的删除策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过期数据的删除策略"}},[s._v("#")]),s._v(" 过期数据的删除策略")]),s._v(" "),a("blockquote",[a("p",[s._v("如果没有设置过期时间,默认是永久保存的")])]),s._v(" "),a("ol",[a("li",[s._v("惰性删除, 在取出时进行过期检查")]),s._v(" "),a("li",[s._v("定期删除: 每隔一段时间就抽取一批进行删除检查")])]),s._v(" "),a("p",[s._v("redis 中采用的是定期加惰性删除的策略")]),s._v(" "),a("p",[s._v("定期与惰性删除会漏掉很多过期key,解决措施就是内存淘汰机制")]),s._v(" "),a("p",[a("a",{attrs:{name:"hMZvc"}})]),s._v(" "),a("h4",{attrs:{id:"内存淘汰机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存淘汰机制"}},[s._v("#")]),s._v(" 内存淘汰机制")]),s._v(" "),a("p",[s._v("如果存储数据超出redis 设置的内存大小,就会触发内存淘汰机制\n默认触发的是noeviction  ,写入失败")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在redis.conf中")]),s._v("\nmaxmemory\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 命令行方式操作")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取maxmemory配置参数的大小")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" config get maxmemory\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置maxmemory参数为100mb")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" config set maxmemory "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("mb\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("内存淘汰策略")]),s._v("公有八种Redis4.0实现了6种淘汰策略，4.0之后又增加了2种策略\n**LRU **表示最近最少使用,**LFU **表示最不常用\n淘汰策略可以分为:")]),s._v(" "),a("ol",[a("li",[s._v("会在所有数据中淘汰的： allkeys-lru、allkeys-random、allkeys-lfu\n"),a("ol",[a("li",[s._v("volatile-ttl：根据键的ttl（生存时间值），删除设置过期时间最近的键，先过期的被先删除。")]),s._v(" "),a("li",[s._v("volatile-random：random也就是随机，设置了过期的 key 会随机的删除。")]),s._v(" "),a("li",[s._v("volatile-lru：在设置过期时间的 key，使用LRU算法筛选淘汰键。")]),s._v(" "),a("li",[s._v("volatile-lfu：在设置过期时间的 key，使用LFU算法筛选淘汰键。")])])]),s._v(" "),a("li",[s._v("会在设置过期时间数据中淘汰的：volatile-lru、volatile-random、volatile-ttl、volatile-lfu\n"),a("ol",[a("li",[s._v("allkeys-random：在所有键中随机淘汰数据。")]),s._v(" "),a("li",[s._v("allkeys-lru：在所有键中使用LRU算法筛选数据。")]),s._v(" "),a("li",[s._v("allkeys-lfu：在所有键中使用lfu算法筛选数据。")])])])]),s._v(" "),a("p",[s._v("**使用建议: **")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("优先使用 allkeys-lru 策略。这样，可以充分利用 LRU 这一经典缓存算法的优势，把最近最常访问的数据留在缓存中，提升应用的访问性能")]),s._v("。如果你的业务数据中有明显的冷热数据区分，我建议你使用 allkeys-lru 策略。")]),s._v(" "),a("li",[s._v("如果业务应用中的数据访问频率相差不大，"),a("strong",[s._v("没有明显的冷热数据区分，建议使用allkeys-random 策略，随机选择淘汰的数据就行")]),s._v("。")]),s._v(" "),a("li",[a("strong",[s._v("如果你的业务中有置顶的需求")]),s._v("，比如置顶新闻、置顶视频，那么，"),a("strong",[s._v("可以使用 volatile-lru策略，同时不给这些置顶数据设置过期时间")]),s._v("。这样一来，"),a("strong",[s._v("这些需要置顶的数据一直不会被删除，而其他数据会在过期时根据 LRU 规则进行筛选")]),s._v("。")])]),s._v(" "),a("p",[s._v("**淘汰数据注意: **\n如果数据中存在脏数据(与mysql查询相比被修改过的数据),请及时修改同步到数据库.因为redis淘汰数据不会在意数据是干净还是脏数据.")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// redis.conf设置淘汰机制")]),s._v("\n maxmemory"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("policy\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//命令行设置内存淘汰机制")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取maxmemory-policy配置")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" config get maxmemory"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("policy\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置maxmemory-policy配置为allkeys-lru")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" config set maxmemory"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("policy allkeys"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("lru\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("a",{attrs:{name:"bD555"}})]),s._v(" "),a("h4",{attrs:{id:"flushall-清空所有数据-命令行内"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flushall-清空所有数据-命令行内"}},[s._v("#")]),s._v(" flushall  清空所有数据--命令行内")]),s._v(" "),a("p",[a("a",{attrs:{name:"wcvqr"}})]),s._v(" "),a("h4",{attrs:{id:"监控-redis-内存数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监控-redis-内存数据"}},[s._v("#")]),s._v(" 监控 redis 内存数据")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("使用redis"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("cli "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("a xxx info memory "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("txt将内存信息保存到文件（xxx是密码）\n或  info memory  获取内存数据\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("info 重要参数")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("属性名")]),s._v(" "),a("th",[s._v("属性说明")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("used_memory")]),s._v(" "),a("td",[s._v("Redis 分配器分配的内存总量，也就是内部存储的所有数据内存占用量")])]),s._v(" "),a("tr",[a("td",[s._v("used_memory_human")]),s._v(" "),a("td",[s._v("以可读的格式返回 used_memory")])]),s._v(" "),a("tr",[a("td",[s._v("used_memory_rss")]),s._v(" "),a("td",[s._v("从操作系统的角度显示 Redis 进程占用的物理内存总量")])]),s._v(" "),a("tr",[a("td",[s._v("used_memory_rss_human")]),s._v(" "),a("td",[s._v("used_memory_rss 的用户宜读格式的显示")])]),s._v(" "),a("tr",[a("td",[s._v("used_memory_peak")]),s._v(" "),a("td",[s._v("内存使用的最大值，表示 used_memory 的峰值")])]),s._v(" "),a("tr",[a("td",[s._v("used_memory_peak_human")]),s._v(" "),a("td",[s._v("以可读的格式返回 used_memory_peak的值")])]),s._v(" "),a("tr",[a("td",[s._v("used_memory_lua")]),s._v(" "),a("td",[s._v("Lua 引擎所消耗的内存大小。")])]),s._v(" "),a("tr",[a("td",[s._v("mem_fragmentation_ratio")]),s._v(" "),a("td",[s._v("used_memory_rss / used_memory 的比值，可以代表内存碎片率")])]),s._v(" "),a("tr",[a("td",[s._v("maxmemory")]),s._v(" "),a("td",[s._v("Redis 能够使用的最大内存上限，0表示没有限制，以字节为单位。")])]),s._v(" "),a("tr",[a("td",[s._v("maxmemory_policy")]),s._v(" "),a("td",[s._v("Redis 使用的内存回收策略，可以是 noeviction、allkeys-lru、volatile-lru、allkeys-random、volatile-random 或者 volatile-ttl。默认是noeviction，也就是不会回收。")])])])]),s._v(" "),a("p",[a("a",{attrs:{name:"eT6Ug"}})]),s._v(" "),a("h2",{attrs:{id:"重启恢复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重启恢复"}},[s._v("#")]),s._v(" 重启恢复")]),s._v(" "),a("p",[s._v("AOF  顺序写记录命令  与 RDB 做快照文件\nredis新版允许兼容使用 "),a("a",{attrs:{name:"CLu22"}})]),s._v(" "),a("h2",{attrs:{id:"redis-架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-架构"}},[s._v("#")]),s._v(" redis 架构")]),s._v(" "),a("p",[a("strong",[s._v("主从架构")]),s._v(" 与 ** 分片集群**\n主从架构,是多台服务器复制主服务器数据,\n分片集群是 数据分片存储到不同节点上")]),s._v(" "),a("p",[a("a",{attrs:{name:"nEM17"}})]),s._v(" "),a("h2",{attrs:{id:"事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[s._v("#")]),s._v(" 事务")]),s._v(" "),a("p",[s._v("redis 可以通过**MULTI ,EXEC,DISCARD **和 "),a("strong",[s._v("watch")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MULTI")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 开启后可以输入多个命令")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OK")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("INCR")]),s._v(" foo\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("QUEUED")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("INCR")]),s._v(" bar\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("QUEUED")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("EXEC")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// 执行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("但redis 的事务 是不支持原子性的, 也就是回滚. "),a("a",{attrs:{name:"Lt6xQ"}})]),s._v(" "),a("h2",{attrs:{id:"消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息队列"}},[s._v("#")]),s._v(" 消息队列")]),s._v(" "),a("p",[s._v("redis 5.0新增了一个数据结构 Stram 可以做数据结构")]),s._v(" "),a("ul",[a("li",[s._v("发布 / 订阅模式")]),s._v(" "),a("li",[s._v("按照消费者组进行消费")]),s._v(" "),a("li",[s._v("消息持久化（ RDB 和 AOF）")])]),s._v(" "),a("p",[s._v("但有消息丢失和堆积问题不好解决 "),a("a",{attrs:{name:"weTJG"}})]),s._v(" "),a("h2",{attrs:{id:"redis和mysql数据库同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis和mysql数据库同步"}},[s._v("#")]),s._v(" redis和mysql数据库同步")]),s._v(" "),a("p",[a("a",{attrs:{name:"XwCTy"}})]),s._v(" "),a("h3",{attrs:{id:"利用数据库本身进行手动同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#利用数据库本身进行手动同步"}},[s._v("#")]),s._v(" 利用数据库本身进行手动同步")]),s._v(" "),a("ol",[a("li",[s._v("在mysql 中对要操作 的数据设置触发器Triggr,监听操作")]),s._v(" "),a("li",[s._v("客户端（NodeServer）向MySQL中写入数据时，触发器会被触发，触发之后调用MySQL的UDF函数")]),s._v(" "),a("li",[s._v("udf函数 可以把数据库写入到Redis中,从而达到同步的效果")])]),s._v(" "),a("p",[a("strong",[s._v("好处")]),s._v("\n同步效率比较高,一般结合延迟双删和缓存超时策略进行手动同步\n延迟双删和缓存超时简介\n首先删除redis中的数据,然后更新数据库中的数据,最后过一段时间(大概一分钟)再对redis中数据做一次删除.这样就可能尽量保证我们的redis数据被删掉,但极端情况下,旧数据还是没有删掉,所以我们设计让它的过期时间短一点,这样就算没删掉也可以很快过期. "),a("a",{attrs:{name:"pohgG"}})]),s._v(" "),a("h3",{attrs:{id:"利用canal进行数据同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#利用canal进行数据同步"}},[s._v("#")]),s._v(" 利用Canal进行数据同步")]),s._v(" "),a("p",[a("strong",[s._v("Canal简介")]),s._v("\n阿里旗下,用来监控数据库内部数据变化的软件.\nCanal会伪装成mysql的备份机.当mysql进行数据操作以后,会将记录记载到日志中,同时发送给备份机,当canal接收到日志数据后,就会进行后续数据同步工作.\n数据更新(以首页广告更新为例)\n当mysql内部的数据发生改变之后.我们的数据监控微服务,就可以根据canal获取到最新更新的数据.,将我们的position字段的值提取出来(代表当前广告的位置),之后数据监控的微服务就会把这个值发送到rabbitmq上,rabbitmq收到这个消息后,就会把这个消息保存到自己的内存中.这时运营的微服务就会从rabbitmq中把值拿出来,调用nginx中的更新数据的lua脚本进行数据更新.")]),s._v(" "),a("ul",[a("li",[s._v("[ ] 解析MySQL的binlog实现，将数据库中的数据同步到Redis")])])])}),[],!1,null,null,null);a.default=r.exports}}]);