(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{350:function(t,a,s){"use strict";s.r(a);var n=s(3),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("a",{attrs:{name:"xPARA"}})]),t._v(" "),a("h2",{attrs:{id:"脑图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#脑图"}},[t._v("#")]),t._v(" 脑图")]),t._v(" "),a("p",[a("img",{attrs:{src:"1653618392022-f060ba8e-f6a5-4539-b9a3-b8b04c17c5ac.jpeg",alt:"脑图.jpeg"}}),t._v(" "),a("a",{attrs:{name:"Uureg"}})]),t._v(" "),a("h2",{attrs:{id:"代码篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码篇"}},[t._v("#")]),t._v(" 代码篇")]),t._v(" "),a("p",[a("a",{attrs:{name:"iExLu"}})]),t._v(" "),a("h3",{attrs:{id:"并发工具类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发工具类"}},[t._v("#")]),t._v(" 并发工具类")]),t._v(" "),a("p",[t._v("总结:")]),t._v(" "),a("ol",[a("li",[t._v("只知道使用并发工具，但并不清楚当前线程的来龙去脉，解决多线程问题却不了解线 程。比如，使用 ThreadLocal 来缓存数据，以为 ThreadLocal 在线程之间做了隔离不会有 线程安全问题，没想到"),a("strong",[t._v("线程重用")]),t._v("导致数据串了。请务必记得，在业务逻辑结束之前清理 ThreadLocal 中的数据。")]),t._v(" "),a("li",[t._v("误以为使用了并发工具就可以解决一切线程安全问题，期望通过把线程不安全的类替 换为线程安全的类来一键解决问题。比如，认为使用了 ConcurrentHashMap 就可以解决 线程安全问题，没对"),a("strong",[t._v("复合逻辑加锁")]),t._v("导致业务逻辑错误。如果你希望在一整段业务逻辑中，对 容器的操作都保持整体一致性的话，需要加锁处理。")]),t._v(" "),a("li",[t._v("没有充分了解并发工具的特性，还是按照"),a("strong",[t._v("老方式使用新工具")]),t._v("导致无法发挥其性能。比 如，使用了 ConcurrentHashMap，但没有充分利用其提供的基于 CAS 安全的方法，还是 使用锁的方式来实现逻辑。你可以阅读一下ConcurrentHashMap 的文档，看一下相关 原子性操作 API 是否可以满足业务需求，如果可以则优先考虑使用。")]),t._v(" "),a("li",[t._v("没有了解清楚工具的"),a("strong",[t._v("适用场景")]),t._v("，在不合适的场景下使用了错误的工具导致性能更差。 比如，没有理解 CopyOnWriteArrayList 的适用场景，把它用在了读写均衡或者大量写操 作的场景下，导致性能问题。对于这种场景，你可以考虑是用普通的 List。\\ "),a("a",{attrs:{name:"QTNMY"}})])]),t._v(" "),a("h3",{attrs:{id:"锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[t._v("#")]),t._v(" 锁")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/cherish010/p/8337706.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("锁的级别"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{name:"EiECt"}})]),t._v(" "),a("h4",{attrs:{id:"关注锁的粒度-避免粒度过大影响性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关注锁的粒度-避免粒度过大影响性能"}},[t._v("#")]),t._v(" 关注锁的粒度,避免粒度过大影响性能,")]),t._v(" "),a("p",[t._v("synchronized 锁的等级: 方法锁 > 实例锁 >  类锁")]),t._v(" "),a("ol",[a("li",[t._v("使用 synchronized 加锁虽然简单，但我们首先要弄清楚共享资源是类还是实例级别 的、会被哪些线程操作，synchronized 关联的锁对象或方法又是什么范围的。")]),t._v(" "),a("li",[t._v("加锁尽可能要考虑粒度和场景，锁保护的代码意味着无法进行多线程操作。对于 Web 类型的天然多线程项目，对方法进行大范围加锁会显著降级并发能力，要考虑尽可能 地只为必要的代码块加锁，降低锁的粒度；而对于要求超高性能的业务，还要细化考虑锁的 读写场景，以及悲观优先还是乐观优先，尽可能针对明确场景精细化加锁方案，可以在适当 的场景下考虑使用 ReentrantReadWriteLock、StampedLock 等高级的锁工具类。")]),t._v(" "),a("li",[t._v("，业务逻辑中有多把锁时要考虑死锁问题，通常的规避方案是，避免无限等待和循环等 待。 此外，"),a("strong",[t._v("如果业务逻辑中锁的实现比较复杂的话，要仔细看看加锁和释放是否配对，是否有遗 漏释放或重复释放的可能性；并且要考虑锁自动超时释放了，而业务逻辑却还在进行的情况 下，如果别的线线程或进程拿到了相同的锁，可能会导致重复执行")]),t._v("。 你可能更容易忽略这点，并且也可能因为误用锁降低应用整体的吞吐。**如果你的业务代 码涉及复杂的锁操作，强烈建议 Mock 相关外部接口或数据库操作后对应用代码进行压 测，通过压测排除锁误用带来的性能问题和死锁问题。  **")])]),t._v(" "),a("p",[a("a",{attrs:{name:"vkei6"}})]),t._v(" "),a("h3",{attrs:{id:"线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[t._v("#")]),t._v(" 线程池")]),t._v(" "),a("ol",[a("li",[t._v("**Executors 类提供的一些快捷声明线程池的方法虽然简单，但隐藏了线程池的参数细 节。因此，使用线程池时，我们一定要根据场景和需求配置合理的线程数、任务队列、拒绝 策略、线程回收策略，并对线程进行明确的命名方便排查问题。  **")]),t._v(" "),a("li",[a("strong",[t._v("线程池的管理策略详情")]),t._v(" "),a("ol",[a("li",[t._v("不会初始化 corePoolSize 个线程，有任务来了才创建工作线程；")]),t._v(" "),a("li",[t._v("当核心线程满了之后不会立即扩容线程池，而是把任务堆积到工作队列中；")]),t._v(" "),a("li",[t._v("当工作队列满了后扩容线程池，一直到线程个数达到 maximumPoolSize 为止；")]),t._v(" "),a("li",[t._v("如果队列已满且达到了最大线程后还有任务进来，按照拒绝策略处理；")]),t._v(" "),a("li",[t._v("当线程数大于核心线程数时，线程等待 keepAliveTime 后还是没有任务需要处理的话， 收缩线程到核心线程数。")])])])]),t._v(" "),a("p",[t._v("了解这些后: ，有助于我们根据实际的容量规划需求，为线程池设置合适的初始化参数。当 然，我们也可以通过一些手段来改变这些默认工作行为，比如：")]),t._v(" "),a("ol",[a("li",[t._v("声明线程池后立即调用 prestartAllCoreThreads 方法，来启动所有核心线程；")]),t._v(" "),a("li",[t._v("传入 true 给 allowCoreThreadTimeOut 方法，来让线程池在空闲的时候同样回收核心 线程")]),t._v(" "),a("li",[a("strong",[t._v("确认线程池本事是不是复用的")])]),t._v(" "),a("li",[a("strong",[t._v("仔细斟酌线程池的混用策略")]),t._v(" "),a("ol",[a("li",[t._v("根据任务的“轻重缓急”来指定线程池的核心 参数，包括线程数、回收策略和任务队列")])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"mU8m9"}})]),t._v(" "),a("h3",{attrs:{id:"连接池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接池"}},[t._v("#")]),t._v(" 连接池")]),t._v(" "),a("p",[a("img",{attrs:{src:"1653888019348-03280866-4095-4c2d-8f48-90ead6d1bbe9.png",alt:"image.png"}}),t._v(" "),a("a",{attrs:{name:"FtTHq"}})]),t._v(" "),a("h4",{attrs:{id:"_1-注意鉴别客户端sdk是否基于连接池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-注意鉴别客户端sdk是否基于连接池"}},[t._v("#")]),t._v(" 1.注意鉴别客户端SDK是否基于连接池")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("连接池和连接分离的 API：")]),t._v("   有一个 XXXPool 类负责连接池实现，先从其获得连接 XXXConnection，然后用获得的连接进行服务端请求，完成后使用者需要归还连接。通 常，XXXPool 是线程安全的，可以并发获取和归还连接，而 XXXConnection 是非线程 安全的。 对应到连接池的结构示意图中，XXXPool 就是右边连接池那个框，左边的客户 端是我们自己的代码。")]),t._v(" "),a("li",[a("strong",[t._v("内部带有连接池的 API：")]),t._v("   对外提供一个 XXXClient 类，通过这个类可以直接进行服务端 请求；这个类内部维护了连接池，SDK 使用者无需考虑连接的获取和归还问题。一般而 言，XXXClient 是线程安全的。对应到连接池的结构示意图中，整个 API 就是蓝色框包 裹的部分。")]),t._v(" "),a("li",[a("strong",[t._v("非连接池的 API：")]),t._v("   一般命名为 XXXConnection，以区分其是基于连接池还是单连接的， 而不建议命名为 XXXClient 或直接是 XXX。直接连接方式的 API 基于单一连接，每次使 用都需要创建和断开连接，性能一般，且通常不是线程安全的。对应到连接池的结构示 意图中，这种形式相当于没有右边连接池那个框，客户端直接连接服务端创建连接。\\ "),a("a",{attrs:{name:"caxKh"}})])]),t._v(" "),a("h4",{attrs:{id:"_2-注意连接池是否复用-尽可能在程序退出之前显式关闭连接池释放资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-注意连接池是否复用-尽可能在程序退出之前显式关闭连接池释放资源"}},[t._v("#")]),t._v(" 2.注意连接池是否复用,尽可能在程序退出之前显式关闭连接池释放资源")]),t._v(" "),a("p",[a("a",{attrs:{name:"E6qJx"}})]),t._v(" "),a("h4",{attrs:{id:"_3-连接池配置根据使用更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-连接池配置根据使用更新"}},[t._v("#")]),t._v(" 3. 连接池配置根据使用更新")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("strong",[t._v("注意配置参数务必验证是否生效 ,")]),t._v(" "),a("strong",[t._v("并且在监控系统中确认参数是否生效、")])]),t._v(" "),a("li",[t._v("** 对类似数据库连接池的重 要资源进行持续检测，并设置一半的使用量作为报警阈值，出现预警后及时扩容。  **")])]),t._v(" "),a("br"),t._v(" "),a("a",{attrs:{name:"C6lGo"}}),t._v("\n### HTTP调用: 超时\\重试\\并发\n"),a("a",{attrs:{name:"N9pNe"}}),t._v("\n#### 配置连接超时参数\n 对于 HTTP 调用，虽然应用层走的是 HTTP 协议，但网络层面始终是 TCP/IP 协议。 TCP/IP 是面向连接的协议，在传输数据之前需要建立连接。几乎所有的网络框架都会提供 这么两个超时参数：  "),a("br"),t._v("**连接超时参数 ** **ConnectTimeout**，让用户配置建连阶段的最长等待时间；  "),a("br"),t._v("**读取超时参数 ReadTimeout**，用来控制从 Socket 上读取数据的最长等待时间。  \n"),a("a",{attrs:{name:"mQ0qP"}}),t._v("\n##### 常见使用误区:\n**连接超时:**\n"),a("ol",[a("li",[t._v("连接超时配置得特别长，比如 60 秒")]),t._v(" "),a("li",[t._v("排查连接超时问题，却没理清连的是哪里")])]),t._v(" "),a("p",[a("strong",[t._v("读取超时参数与读取超时:")])]),t._v(" "),a("ol",[a("li",[t._v("出现读取超时,服务端执行就会中断")]),t._v(" "),a("li",[t._v("为读取超时只是 Socket 网络层面的概念，是数据传输的最长耗时，故将其 配置得非常短，比如 100 毫秒。  实际上 大部分代表是服务端处理业务逻辑的时间")]),t._v(" "),a("li",[t._v("认为超时时间越长任务接口成功率就越高，将读取超时参数配置得太长。")])]),t._v(" "),a("p",[a("strong",[t._v("Feign 和 Ribbon 配合使用")]),t._v("\nFeign 默认读取超时是一秒,一般建议修改")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果只单独配置读取超时,并不会生效")]),t._v("\nfeign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("client"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readTimeout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),t._v("\nfeign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("client"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("connectTimeout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),t._v("\n    \n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//为单独的Feign Client设置超时时间,把 default 替换为Client 的 name")]),t._v("\nfeign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("client"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readTimeout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),t._v("\nfeign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("client"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("connectTimeout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),t._v("\nfeign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("client"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clientsdk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readTimeout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),t._v("\nfeign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("client"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clientsdk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("connectTimeout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),t._v("   \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[a("a",{attrs:{name:"n5VNL"}})]),t._v(" "),a("h4",{attrs:{id:"重试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重试"}},[t._v("#")]),t._v(" 重试")]),t._v(" "),a("p",[t._v("对于重试，因为 HTTP 协议认为 Get 请求是数据查询操作，是无状态的，又考虑到网络出 现丢包是比较常见的事情，有些 HTTP 客户端或代理服务器会自动重试 Get/Head 请求。"),a("br"),t._v("\nRibbon 配置参数优先级低于Fegin,Ribbon默认存在自动重试设置")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("ribbon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("ReadTimeout")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("ribbon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("ConnectTimeout")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 禁用服务调用失败后,自动重试")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("ribbon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("MaxAutoRetriesNextServer")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[a("a",{attrs:{name:"HOcCq"}})]),t._v(" "),a("h4",{attrs:{id:"httpclient-默认设置了最大并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#httpclient-默认设置了最大并发"}},[t._v("#")]),t._v(" HttpClient 默认设置了最大并发")]),t._v(" "),a("p",[t._v("查看 PoolingHttpClientConnectionManager 源码，可以注意到有两个重要参数："),a("br"),t._v("\n** defaultMaxPerRoute=2，也就是同一个主机 / 域名的最大并发请求数为 2**\n "),a("strong",[t._v("maxTotal=20，也就是所有主机整体最大并发为 20")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//例如配置:  ")]),t._v("\nhttpClient2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpClients")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("custom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMaxConnPerRoute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMaxConnTotal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("a",{attrs:{name:"ilgkt"}})]),t._v(" "),a("h3",{attrs:{id:"spring-声明式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-声明式事务"}},[t._v("#")]),t._v(" Spring 声明式事务")]),t._v(" "),a("p",[a("a",{attrs:{name:"inFEJ"}})]),t._v(" "),a("h4",{attrs:{id:"transactional-生效原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transactional-生效原则"}},[t._v("#")]),t._v(" @Transactional 生效原则")]),t._v(" "),a("ol",[a("li",[t._v("除非特殊配置（比如使用 AspectJ 静态织入实现 AOP），否则只有定义在** public **方法上的 @Transactional 才能生效")]),t._v(" "),a("li",[t._v("必须通过"),a("strong",[t._v("代理过的类从外部调用")]),t._v("目标方法才能生效。\\ "),a("a",{attrs:{name:"yAdNe"}})])]),t._v(" "),a("h4",{attrs:{id:"事务即便生效也不一定回滚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务即便生效也不一定回滚"}},[t._v("#")]),t._v(" 事务即便生效也不一定回滚")]),t._v(" "),a("ol",[a("li",[t._v("只有异常传播出了标记了 @Transactional 注解的方法，事务才能回滚。")]),t._v(" "),a("li",[t._v("自己方法内捕获异常时设置(手动请求回滚): **TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();  **")]),t._v(" "),a("li",[t._v("默认情况下，出现 RuntimeException（非受检异常）或 Error 的时候，Spring 才会回滚事务")]),t._v(" "),a("li",[t._v("期望所有Exception都回滚事务:  **@Transactional(rollbackFor = Exception.class  ** "),a("a",{attrs:{name:"DTj06"}})])]),t._v(" "),a("h4",{attrs:{id:"确认事务传播配置是否符合自己的业务逻辑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#确认事务传播配置是否符合自己的业务逻辑"}},[t._v("#")]),t._v(" 确认事务传播配置是否符合自己的业务逻辑")]),t._v(" "),a("ol",[a("li",[t._v("事务中存父子逻辑,父子逻辑其实默认存在一个事务中,如果子逻辑出现异常,即使捕获.事务状态还会改变,整体事务无法提交.\n"),a("ol",[a("li",[t._v("让子逻辑在独立事务上运行")]),t._v(" "),a("li",[t._v("父逻辑捕获异常,防止异常传递导致主事务回滚")])])])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//子逻辑")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//为注解加上 propagation =Propagation.REQUIRES_NEW 来设置 REQUIRES_NEW 方式的事务传播策略，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行到这个方法时需要开启新的事务，并挂起当前事务")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("propagation "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Propagation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REQUIRES_NEW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createSubUserWithExceptionRight")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserEntity")]),t._v(" entity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nlog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"createSubUserWithExceptionRight start"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nuserRepository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("save")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"invalid status"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//父逻辑捕获异常")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createUserRight")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserEntity")]),t._v(" entity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createMainUser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nsubUserService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createSubUserWithExceptionRight")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 捕获异常，防止主方法回滚")]),t._v("\nlog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"create sub user error:{}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br")])]),a("p",[a("a",{attrs:{name:"iOdRf"}})]),t._v(" "),a("h3",{attrs:{id:"数据库索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库索引"}},[t._v("#")]),t._v(" 数据库索引")]),t._v(" "),a("p",[t._v("Mysql将数据存储和查询操作抽象成了存储引擎,根据不同的存储引擎有不同的操作,我们现在比较流行使用InnDB引擎\nInnDB引擎 引入"),a("strong",[t._v("B+树")]),t._v("来保证快速查找数据, 分为** 聚簇索引**  和 "),a("strong",[t._v("二级索引 "),a("strong",[t._v(", "),a("strong",[t._v("聚簇索引")]),t._v("索引保存的是行整体数据, "),a("strong",[t._v("二级索引")]),t._v(" 保存的是")]),t._v("聚簇索引 "),a("strong",[t._v("位置,通过")]),t._v("二级索引")]),t._v(" 查找**聚簇索引 "),a("strong",[t._v("的过程 就是")]),t._v("回表, **为了保证查找速度,需要尽量避免回表操作.")]),t._v(" "),a("p",[a("a",{attrs:{name:"Add4B"}})]),t._v(" "),a("h4",{attrs:{id:"二级索引的代价"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二级索引的代价"}},[t._v("#")]),t._v(" 二级索引的代价")]),t._v(" "),a("p",[a("strong",[t._v("维护代价:")]),t._v("  创建 N 个二级索引，就需要再创建 N 棵 B+ 树，新增数据时不仅要修改 聚簇索引，还需要修改这 N 个二级索引"),a("br"),t._v(" "),a("strong",[t._v("空间代价:")]),t._v(" 虽然二级索引不保存原始数据，但要保存索引列的数据，所以会占用更多 的空间。"),a("br"),t._v(" "),a("strong",[t._v("回表代价:")]),t._v(" 二级索引不保存原始数据，通过索引找到主键后需要再查询聚簇索引， 才能得到我们要的数据。\\ "),a("a",{attrs:{name:"cnjRm"}})]),t._v(" "),a("h4",{attrs:{id:"索引开销使用建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引开销使用建议"}},[t._v("#")]),t._v(" 索引开销使用建议")]),t._v(" "),a("p",[t._v("** 第一，**无需一开始就建立索引，可以等到业务场景明确后，或者是数据量超过 1 万、查询 变慢后，再针对需要查询、排序或分组的字段创建索引。创建索引后可以使用 EXPLAIN 命 令，确认查询是否可以使用索引。我会在下一小节展开说明。\n"),a("strong",[t._v("第二")]),t._v("，尽量索引轻量级的字段，比如能索引 int 字段就不要索引 varchar 字段。索引字段也 可以是部分前缀，在创建的时候指定字段索引长度。针对长文本的搜索，可以考虑使用 Elasticsearch 等专门用于文本搜索的索引数据库。\n** 第三，**尽量不要在 SQL 语句中 SELECT *，而是 SELECT 必要的字段，甚至可以考虑使用联 合索引来包含我们要搜索的字段，既能实现索引加速，又可以避免回表的开销。\\ "),a("a",{attrs:{name:"jCAD5"}})]),t._v(" "),a("h4",{attrs:{id:"索引使用失效情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引使用失效情况"}},[t._v("#")]),t._v(" 索引使用失效情况")]),t._v(" "),a("p",[t._v("** 第一，**索引只能匹配列前缀"),a("br"),t._v("\n** 第二，**条件涉及函数操作无法走索引。\n **第三，**联合索引只能匹配左边的列。"),a("br"),t._v("\nmysql 会自动计算查找成本来决定是否使用索引,如果觉得mysql 计算失误,可以用个"),a("code",[t._v("FORCE INDEX()")]),t._v(" 强制使用索引\n MySQL 5.6 及之后的版本中，我们可以使用 optimizer trace 功能查看优化器生成执行 计划的整个过程。如")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开启功能")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SET")]),t._v(" optimizer_trace"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"enabled=on"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NAME")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("'name84059' "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AND")]),t._v(" create_time"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("01")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("05")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" information_schema"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OPTIMIZER_TRACE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SET")]),t._v(" optimizer_trace"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"enabled=off"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//关闭功能")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[a("a",{attrs:{name:"V9ACC"}})]),t._v(" "),a("h3",{attrs:{id:"判等问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判等问题"}},[t._v("#")]),t._v(" 判等问题")]),t._v(" "),a("p",[t._v("equals 和 == 的区别  , 针对基本类型只能 使用 ==，针对 Integer、String 在内的引用类型，需要使用 equals。Integer 和 String 的坑在于，使用 == 判等有时也能获得正确结果。"),a("br"),t._v("\n 对于自定义类型，如果类型需要参与判等，那么务必同时实现 equals 和 hashCode 方法，并确保逻辑一致。如果希望快速实现 equals、hashCode 方法，我们可以借助 IDE 的代码生成功能，或使用 Lombok 来生成。如果类型也要参与比较，那么 compareTo 方 法的逻辑同样需要和 equals、hashCode 方法一致。\n最后，Lombok 的 @EqualsAndHashCode 注解实现 equals 和 hashCode 的时候，默认 使用类型所有非 static、非 transient 的字段，且不考虑父类。如果希望改变这种默认行 为，可以使用 @EqualsAndHashCode.Exclude 排除一些字段，并设置 callSuper = true 来让子类的 equals 和 hashCode 调用父类的相应方法。\\ "),a("a",{attrs:{name:"icrw9"}})]),t._v(" "),a("h3",{attrs:{id:"数值计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值计算"}},[t._v("#")]),t._v(" 数值计算")]),t._v(" "),a("p",[t._v("第一，切记，要精确表示浮点数应该使用 BigDecimal。并且，使用 BigDecimal 的\nDouble 入参的构造方法同样存在精度丢失问题，应该使用 String 入参的构造方法或者\nBigDecimal.valueOf 方法来初始化。\n第二，对浮点数做精确计算，参与计算的各种数值应该始终使用 BigDecimal，所有的计算\n都要通过 BigDecimal 的方法进行，切勿只是让 BigDecimal 来走过场。任何一个环节出现\n精度损失，最后的计算结果可能都会出现误差。\n第三，对于浮点数的格式化，如果使用 String.format 的话，需要认识到它使用的是四舍五\n入，可以考虑使用 DecimalFormat 来明确指定舍入方式。但考虑到精度问题，我更建议使\n用 BigDecimal 来表示浮点数，并使用其 setScale 方法指定舍入的位数和方式。\n第四，进行数值运算时要小心溢出问题，虽然溢出后不会出现异常，但得到的计算结果是完\n全错误的。我们考虑使用 Math.xxxExact 方法来进行运算，在溢出时能抛出异常，更建议\n对于可能会出现溢出的大数运算使用 BigInteger 类。")]),t._v(" "),a("p",[a("a",{attrs:{name:"mgb9v"}})]),t._v(" "),a("h3",{attrs:{id:"集合类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合类"}},[t._v("#")]),t._v(" 集合类")]),t._v(" "),a("p",[a("a",{attrs:{name:"ghwyd"}})]),t._v(" "),a("h4",{attrs:{id:"数组转list集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组转list集合"}},[t._v("#")]),t._v(" 数组转list集合")]),t._v(" "),a("p",[a("strong",[t._v("使用Arrays.asList把数据转换为List的坑")])]),t._v(" "),a("ol",[a("li",[t._v("不能直接用Arrays.asList来转换基本类型\n"),a("ol",[a("li",[t._v("可以通过**Arrays.stream **来转换")]),t._v(" "),a("li",[t._v("int 转为Inter 类型")])])])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//list 存储的元素为 int 数组,而不是int 类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("Arrays.asList")]),t._v(" 返回的list 不支持增删改查操作\n"),a("ol",[a("li",[t._v("Arrays.asList 返回的 List 并不是 我们期望的 java.util.ArrayList，而是 Arrays 的内部类 ArrayList。ArrayList 内部类继承自 AbstractList 类，并没有覆写父类的 add 方法，而父类中 add 方法的实现，就是抛出 UnsupportedOperationException。")])])]),t._v(" "),a("li",[t._v("对原始数组的修改会影响到我们获取到的List")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//通过New ArrayList 来修复")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),t._v(" list  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("a",{attrs:{name:"J0sHb"}})]),t._v(" "),a("h4",{attrs:{id:"对list进行切片操作会导致oom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对list进行切片操作会导致oom"}},[t._v("#")]),t._v(" 对list进行切片操作"),a("strong",[t._v("会导致OOM")])]),t._v(" "),a("p",[t._v("原因是sublist 返回的List 是强引用,导致list 一直无法被回收\n"),a("strong",[t._v("修复方法:")])]),t._v(" "),a("ol",[a("li",[t._v("不直接使用sublist返回的list,重新使用 new ArrayList,在构造函数中传入sublist 返回的list")]),t._v(" "),a("li",[t._v("使用 java8 中stream 的skip 和limit API来跳过流的中的元素,以及限制流中元素的个数,同样可以达到切片的目的 "),a("a",{attrs:{name:"fAo6d"}})])]),t._v(" "),a("h4",{attrs:{id:"一定要让合适的数据结构做合适的事"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一定要让合适的数据结构做合适的事"}},[t._v("#")]),t._v(" 一定要让合适的数据结构做合适的事")]),t._v(" "),a("p",[a("a",{attrs:{name:"fpA4Y"}})]),t._v(" "),a("h5",{attrs:{id:"误区-使用数据结构不考虑平衡时间与空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#误区-使用数据结构不考虑平衡时间与空间"}},[t._v("#")]),t._v(" 误区:使用数据结构不考虑平衡时间与空间")]),t._v(" "),a("p",[t._v("例如: ArrayList  get操作的复杂度是"),a("code",[t._v("O(n)")]),t._v(", Map get操作的复杂度是"),a("code",[t._v("O(1)")]),a("br"),t._v("\n但Map 的空间占用比 Arraylist 要大很多 "),a("a",{attrs:{name:"qTtzP"}})]),t._v(" "),a("h5",{attrs:{id:"误区-过于迷信教科书的大-o-时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#误区-过于迷信教科书的大-o-时间复杂度"}},[t._v("#")]),t._v(" 误区,过于迷信教科书的大 O 时间复杂度")]),t._v(" "),a("p",[t._v("抛开算法层面不谈，由于 CPU 缓存、内存连续性等问题，链表这种数 据结构的实现方式对性能并不友好，即使在它最擅长的场景都不一定可以发挥威力。\n"),a("a",{attrs:{name:"bUDyr"}})]),t._v(" "),a("h3",{attrs:{id:"空值处理-null-与-空指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空值处理-null-与-空指针"}},[t._v("#")]),t._v(" 空值处理: null 与 空指针")]),t._v(" "),a("p",[t._v("日常排查空指针错误很困难,可以使用阿里云开源的"),a("strong",[t._v("Arthas")]),t._v(" ,定位java 生产问题 "),a("a",{attrs:{name:"rZF9R"}})]),t._v(" "),a("h5",{attrs:{id:"arthas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arthas"}},[t._v("#")]),t._v(" **Arthas **")]),t._v(" "),a("p",[t._v("watch 命令监控 方法的入参, 命令的参数包括类名表达式、方法表达式和观察表达式\nstack 命令来查看  方法的调用栈\n"),a("a",{attrs:{name:"fFwuc"}})]),t._v(" "),a("h5",{attrs:{id:"空指针异常修复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空指针异常修复"}},[t._v("#")]),t._v(" 空指针异常修复")]),t._v(" "),a("p",[t._v("最直白的方式是先判空后操作,但最常用的if else 会增加代码量,可以尝试利用Java 8的Option类来消除代替.")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Optional")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ofNullable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fooService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FooService")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBarService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("barService "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"OK"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("barService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ifPresent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"OK"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[a("strong",[t._v("使用判空方式或 Optional 方式来避免出现空指针异常，不一定是解 决问题的最好方式，空指针没出现可能隐藏了更深的 Bug")]),t._v("。因此，解决空指针异常，还是 要真正 case by case 地定位分析案例，然后再去做判空处理，而处理时也并不只是判断非 空然后进行正常业务流程这么简单，同样需要考虑为空的时候是应该出异常、设默认值还是 记录日志等。\n"),a("a",{attrs:{name:"FoODv"}})]),t._v(" "),a("h5",{attrs:{id:"pojo中属性的null-代表了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pojo中属性的null-代表了什么"}},[t._v("#")]),t._v(" POJO中属性的null 代表了什么")]),t._v(" "),a("p",[t._v("null 是指针没有任何指向,但结合业务逻辑会复杂很多")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("DTO 中字段的null 到底意味着什么,是客户端没有传么")])]),t._v(" "),a("li",[a("p",[t._v("为什么DTO 中字段要设默认值")])]),t._v(" "),a("li",[a("p",[t._v("如果数据库实体中的字段有null,那通过数据访问框架保存数据是否会覆盖数据库中的既有数据")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v(" <br /> \t  \t  \t\t\t\t<br /> \t\t\t<br /> \t\t<br /> \t \n")])])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"irgzQ"}})]),t._v(" "),a("h3",{attrs:{id:"日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日志"}},[t._v("#")]),t._v(" 日志")]),t._v(" "),a("p",[a("a",{attrs:{name:"ywNDq"}})]),t._v(" "),a("h3",{attrs:{id:"文件io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件io"}},[t._v("#")]),t._v(" 文件IO")]),t._v(" "),a("p",[a("a",{attrs:{name:"X8bYx"}})]),t._v(" "),a("h3",{attrs:{id:"序列化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#序列化"}},[t._v("#")]),t._v(" 序列化")]),t._v(" "),a("p",[a("a",{attrs:{name:"jvOTj"}})]),t._v(" "),a("h3",{attrs:{id:"java日期类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java日期类"}},[t._v("#")]),t._v(" java日期类")]),t._v(" "),a("p",[a("a",{attrs:{name:"RO3rD"}})]),t._v(" "),a("h3",{attrs:{id:"oom问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oom问题"}},[t._v("#")]),t._v(" OOM问题")]),t._v(" "),a("p",[a("a",{attrs:{name:"kjCGJ"}})]),t._v(" "),a("h3",{attrs:{id:"反射-注解-泛型-遇到oop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射-注解-泛型-遇到oop"}},[t._v("#")]),t._v(" 反射,注解,泛型 遇到OOP")]),t._v(" "),a("p",[a("a",{attrs:{name:"lpkKx"}})]),t._v(" "),a("h3",{attrs:{id:"spring框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring框架"}},[t._v("#")]),t._v(" spring框架")]),t._v(" "),a("p",[a("a",{attrs:{name:"wnkA7"}})]),t._v(" "),a("h2",{attrs:{id:"设计篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计篇"}},[t._v("#")]),t._v(" 设计篇")]),t._v(" "),a("p",[a("a",{attrs:{name:"qp8wN"}})]),t._v(" "),a("h2",{attrs:{id:"安全篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全篇"}},[t._v("#")]),t._v(" 安全篇")]),t._v(" "),a("p",[a("a",{attrs:{name:"w6CwG"}})]),t._v(" "),a("h2",{attrs:{id:"加餐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加餐"}},[t._v("#")]),t._v(" 加餐")])])}),[],!1,null,null,null);a.default=r.exports}}]);