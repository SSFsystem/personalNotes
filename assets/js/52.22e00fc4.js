(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{375:function(n,t,e){"use strict";e.r(t);var o=e(3),r=Object(o.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[t("strong",[n._v("BeanFactory：")]),n._v("\n是Spring里面最低层的接口，提供了最简单的容器的功能，只提供了实例化对象和拿对象的功能；")]),n._v(" "),t("p",[t("strong",[n._v("ApplicationContext：")]),n._v("\n应用上下文，继承BeanFactory接口，它是Spring的一各更高级的容器，提供了更多的有用的功能；\n1) 国际化（MessageSource）\n2) 访问资源，如URL和文件（ResourceLoader）\n3) 载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层"),t("br"),n._v("\n4) 消息发送、响应机制（ApplicationEventPublisher）\n5) AOP（拦截器）")]),n._v(" "),t("p",[t("strong",[n._v("两者装载bean的区别")])]),n._v(" "),t("p",[t("strong",[n._v("BeanFactory：")]),n._v("\nBeanFactory在启动的时候不会去实例化Bean，中有从容器中拿Bean的时候才会去实例化；")]),n._v(" "),t("p",[t("strong",[n._v("ApplicationContext：")]),n._v(" "),t("a",{attrs:{href:"https://so.csdn.net/so/search?q=ApplicationContext&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[n._v("ApplicationContext"),t("OutboundLink")],1),n._v("在启动的时候就把所有的Bean全部实例化了。它还可以为Bean配置lazy-init=true来让Bean延迟实例化；")])])}),[],!1,null,null,null);t.default=r.exports}}]);